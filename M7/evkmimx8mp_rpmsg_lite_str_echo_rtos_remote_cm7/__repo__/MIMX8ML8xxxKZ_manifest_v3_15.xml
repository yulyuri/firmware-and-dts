<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_MIMX8ML8xxxKZ" name="MIMX8ML8xxxKZ" brief="This is SDK version 25.06.00 manifest file. It describes the content of the MIMX8ML8xxxKZ and additional settings for tools that support SDK version 25.06.00" format_version="3.15" api_version="2.0.0" configuration="96dab09fa2d71336c91f91c0d1a6ee32" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.15.xsd">
  <!--Timestamp (UTC): 2025-07-01 06:36:28.663564-->
  <!--This manifest is generated based on sdk repo commit: 2893c6df8c59f5763476300b584907c4d59ff2e2-->
  <externalDefinitions>
    <definition extID="com.crt.advproject.config.exe.debug"/>
    <definition extID="com.crt.advproject.config.exe.release"/>
    <definition extID="QSPI_FLASH_MIMX8ML8xxxKZ"/>
    <definition extID="QSPI_FLASH_MIMX8ML8xxxLZ"/>
  </externalDefinitions>
  <ksdk id="MCUXpresso250600" name="MCUXpresso250600" version="25.06.00" revision="890 2025-06-27"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded_10-2021.10" version="13.2.1" full_name="GCC ARM Embedded 10-2021.10" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
  </toolchains>
  <boards>
    <board id="evkmimx8mp" name="EVK-MIMX8MP" href="https://www.nxp.com/pip/8MPLUSLPD4-EVK" version="1.0.0" package="MIMX8ML8DVNLZ">
      <description>EVK-MIMX8MP</description>
      <image path="boards/evkmimx8mp" type="image">
        <files mask="evkmimx8mp.png"/>
      </image>
      <examples>
        <example id="evkmimx8mp_rpmsg_lite_str_echo_rtos_remote_cm7" name="rpmsg_lite_str_echo_rtos_remote_cm7" brief="The Multicore RPMsg-Lite string echo project is a simple demonstration program that uses the MCUXpresso SDK software and the RPMsg-Lite library and shows how to implement the inter-core communication between cores of the multicore system.&#10;It works with Linux RPMsg master peer to transfer string content back and forth. The name service handshake is performed first to create the communication channels. Next, Linux OS waits for user input to the RPMsg virtual tty. Anything which is received is sent to Cortex-M. Cortex-M displays what is received, and echoes back the same message as an acknowledgement. The tty reader on the Linux side can get the message, and start another transaction. The demo demonstrates RPMsgâ€™s ability to send arbitrary content back and forth. Note - The maximum message length supported by RPMsg is 496 bytes. String longer than 496 will be divided by virtual tty into several messages.&#10;Shared memory usage&#10;This multicore example uses the shared memory for data exchange. The shared memory region is defined and the size can be adjustable in the linker file. The shared memory region start address and the size have to be defined in linker file for each core equally. The shared memory start address is then exported from the linker to the application." toolchain="armgcc" compiler="compiler_gcc" category="multicore_examples" path="boards/evkmimx8mp/multicore_examples/rpmsg_lite_str_echo_rtos/remote">
          <external path="boards/evkmimx8mp/multicore_examples/rpmsg_lite_str_echo_rtos/remote" type="xml">
            <files mask="rpmsg_lite_str_echo_rtos_remote_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_rpmsg_lite_pingpong_rtos_linux_remote_cm7" name="rpmsg_lite_pingpong_rtos_linux_remote_cm7" brief="The Multicore RPMsg-Lite pingpong RTOS project is a simple demonstration program that uses the MCUXpresso SDK software, the RPMsg-Lite library and Linux rpmsg driver and shows how to implement the inter-core communication between cores of the multicore system. The Master core run on Linux OS(MPU), and the remote core run on MCU(MCU). After soc reset and Linux boot up, the inter-core communication is established. Once the RPMsg is initialized and endpoints are created the message exchange starts, incrementing a virtual counter that is part of the message payload. The message pingpong finishes when the counter reaches the value of 100. Then the RPMsg-Lite is deinitialized and the procedure of the data exchange is repeated again.&#10;Shared memory usage&#10;This multicore example uses the shared memory for data exchange. The shared memory region is defined and the size can be adjustable by RL_BUFFER_COUNT and RL_BUFFER_PAYLOAD_SIZE in rpmsg_config.h. The shared memory region start address have to be defined in board.h or app.h. The size and start address must match with the config of DeviceTree of Linux." toolchain="armgcc" compiler="compiler_gcc" category="multicore_examples" path="boards/evkmimx8mp/multicore_examples/rpmsg_lite_pingpong_rtos_linux/remote">
          <external path="boards/evkmimx8mp/multicore_examples/rpmsg_lite_pingpong_rtos_linux/remote" type="xml">
            <files mask="rpmsg_lite_pingpong_rtos_linux_remote_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_tickless_cm7" name="freertos_tickless_cm7" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using timer module." toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_tickless">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_swtimer_cm7" name="freertos_swtimer_cm7" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_swtimer">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_sem_static_cm7" name="freertos_sem_static_cm7" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_sem_static">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_sem_static" type="xml">
            <files mask="freertos_sem_static_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_sem_cm7" name="freertos_sem_cm7" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two different tasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_sem">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_queue_cm7" name="freertos_queue_cm7" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_queue">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_mutex_cm7" name="freertos_mutex_cm7" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_mutex">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_hello_cm7" name="freertos_hello_cm7" brief="The Hello World project is a simple demonstration program that uses the SDK UART driver in combination with FreeRTOS. The purpose of this demo is to show how to use the debug console and to provide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; message via debug console utility and suspend itself." toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_hello">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_generic_cm7" name="freertos_generic_cm7" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation from http://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of several tasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data to xQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number of received messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given from vApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_generic">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_freertos_event_cm7" name="freertos_event_cm7" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc" compiler="compiler_gcc" category="freertos_examples" path="boards/evkmimx8mp/freertos_examples/freertos_event">
          <external path="boards/evkmimx8mp/freertos_examples/freertos_event" type="xml">
            <files mask="freertos_event_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_cmsis_iuart_sdma_transfer_cm7" name="cmsis_iuart_sdma_transfer_cm7" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http:/www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_sdma_transfer example shows how to use uart cmsis driver with SDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/uart" path="boards/evkmimx8mp/cmsis_driver_examples/uart/sdma_transfer">
          <external path="boards/evkmimx8mp/cmsis_driver_examples/uart/sdma_transfer" type="xml">
            <files mask="cmsis_iuart_sdma_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_cmsis_iuart_interrupt_transfer_cm7" name="cmsis_iuart_interrupt_transfer_cm7" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http:/www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/uart" path="boards/evkmimx8mp/cmsis_driver_examples/uart/interrupt_transfer">
          <external path="boards/evkmimx8mp/cmsis_driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="cmsis_iuart_interrupt_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_cmsis_ii2c_int_b2b_transfer_slave_cm7" name="cmsis_ii2c_int_b2b_transfer_slave_cm7" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http:/www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/evkmimx8mp/cmsis_driver_examples/i2c/int_b2b_transfer/slave">
          <external path="boards/evkmimx8mp/cmsis_driver_examples/i2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_ii2c_int_b2b_transfer_slave_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_cmsis_ii2c_int_b2b_transfer_master_cm7" name="cmsis_ii2c_int_b2b_transfer_master_cm7" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http:/www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/evkmimx8mp/cmsis_driver_examples/i2c/int_b2b_transfer/master">
          <external path="boards/evkmimx8mp/cmsis_driver_examples/i2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_ii2c_int_b2b_transfer_master_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_cmsis_enet_txrx_transfer_cm7" name="cmsis_enet_txrx_transfer_cm7" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide &#10;range of supported microcontroller devices. The API connects microcontroller peripherals with middleware &#10;that implements for example communication stacks, file systems, or graphic user interfaces. &#10;More information and usage method please refer to http:/www.keil.com/pack/doc/cmsis/Driver/html/index.html.&#10;&#10;The cmsis_enet_transfer example shows how to use CMSIS ENET driver:&#10;&#10;In this example, the ENET transmits 20 number broadcast frames and will print the received frame.&#10;&#10;" toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/enet" path="boards/evkmimx8mp/cmsis_driver_examples/enet/txrx_transfer">
          <external path="boards/evkmimx8mp/cmsis_driver_examples/enet/txrx_transfer" type="xml">
            <files mask="cmsis_enet_txrx_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_cmsis_ecspi_sdma_loopback_transfer_cm7" name="cmsis_ecspi_sdma_loopback_transfer_cm7" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http:/www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_ecspi_sdma_loopback_transfer example shows how to use CMSIS ECSPI driver in SDMA way: In this example , ECSPI will do a loopback transfer in SDMA way, so, there is no need to set up any pins.And we should set the ECSPIx-&gt;TESTREG[LBC] bit, this bit is used in Master mode only. When this bit is set, the ECSPI connects the transmitter and receiver sections internally, and the data shifted out from the most-significant bit of the shift register is looped back into the least-significant bit of the Shift register.In this way, a self-test of the complete transmit/receive path can be made. The output pins are not affected, and the input pins are ignored." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/ecspi" path="boards/evkmimx8mp/cmsis_driver_examples/ecspi/sdma_loopback_transfer">
          <external path="boards/evkmimx8mp/cmsis_driver_examples/ecspi/sdma_loopback_transfer" type="xml">
            <files mask="cmsis_ecspi_sdma_loopback_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_cmsis_ecspi_int_loopback_transfer_cm7" name="cmsis_ecspi_int_loopback_transfer_cm7" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http:/www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_ecspi_int_loopback_transfer example shows how to use CMSIS ECSPI driver in interrupt way: In this example , ECSPI will do a loopback transfer in interrupt way, so, there is no need to set up any pins.And we should set the ECSPIx-&gt;TESTREG[LBC] bit, this bit is used in Master mode only. When this bit is set, the ECSPI connects the transmitter and receiver sections internally, and the data shifted out from the most-significant bit of the shift register is looped back into the least-significant bit of the Shift register.In this way, a self-test of the complete transmit/receive path can be made. The output pins are not affected, and the input pins are ignored." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/ecspi" path="boards/evkmimx8mp/cmsis_driver_examples/ecspi/int_loopback_transfer">
          <external path="boards/evkmimx8mp/cmsis_driver_examples/ecspi/int_loopback_transfer" type="xml">
            <files mask="cmsis_ecspi_int_loopback_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_wdog01_cm7" name="wdog01_cm7" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,implemented to test the wdog.And then after 10 times of refreshing the watchdog, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing.Please notice that because WDOG control registers are write-once only, so the WDOG_Init function and the WDOG_Disable function can be called only once after reset." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/wdog" path="boards/evkmimx8mp/driver_examples/wdog">
          <external path="boards/evkmimx8mp/driver_examples/wdog" type="xml">
            <files mask="wdog01_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_tmu_2_temperature_polling_cm7" name="tmu_2_temperature_polling_cm7" brief="The TMU example shows how to configure TMU register to monitor and report the temperature from multiple temperature measurement sites strategically located on the chip. It monitors these sites and outputs the immediate/average temperature." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tmu" path="boards/evkmimx8mp/driver_examples/tmu/temperature_polling">
          <external path="boards/evkmimx8mp/driver_examples/tmu/temperature_polling" type="xml">
            <files mask="tmu_2_temperature_polling_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_tmu_2_monitor_threshold_cm7" name="tmu_2_monitor_threshold_cm7" brief="The TMU example shows how to configure TMU register to monitor and report the temperature from multiple temperature measurement sites strategically located on the chip. It monitors these sites and can signal an alarm if a programmed threshold is ever exceeded." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tmu" path="boards/evkmimx8mp/driver_examples/tmu/monitor_threshold">
          <external path="boards/evkmimx8mp/driver_examples/tmu/monitor_threshold" type="xml">
            <files mask="tmu_2_monitor_threshold_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_sema4_uboot_cm7" name="sema4_uboot_cm7" brief="The sema4 uboot example shows how to use SEMA4 driver to lock and unlock a sema gate,the notification IRQ is also demonstrated in this example.This example should work together with uboot. This example runs on Cortex-M core,the uboot runs on the Cortex-A core." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sema4" path="boards/evkmimx8mp/driver_examples/sema4/uboot">
          <external path="boards/evkmimx8mp/driver_examples/sema4/uboot" type="xml">
            <files mask="sema4_uboot_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_sdma_scatter_gather_cm7" name="sdma_scatter_gather_cm7" brief="The SDMA scatter gather example is a simple demonstration program that uses the SDK software.It excuates several shots transfer from source buffer to destination buffer using the SDK SDMA drivers.The purpose of this example is to show how to use the SDMA and to provide a scatter gather example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sdma" path="boards/evkmimx8mp/driver_examples/sdma/scatter_gather">
          <external path="boards/evkmimx8mp/driver_examples/sdma/scatter_gather" type="xml">
            <files mask="sdma_scatter_gather_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_sdma_memory_to_memory_cm7" name="sdma_memory_to_memory_cm7" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sdma" path="boards/evkmimx8mp/driver_examples/sdma/memory_to_memory">
          <external path="boards/evkmimx8mp/driver_examples/sdma/memory_to_memory" type="xml">
            <files mask="sdma_memory_to_memory_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_sai_sdma_transfer_cm7" name="sai_sdma_transfer_cm7" brief="The sai_sdma_transfer example shows how to use sai driver with SDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM/DDR using SDMA channel." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/evkmimx8mp/driver_examples/sai/sdma_transfer">
          <external path="boards/evkmimx8mp/driver_examples/sai/sdma_transfer" type="xml">
            <files mask="sai_sdma_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_sai_sdma_record_playback_cm7" name="sai_sdma_record_playback_cm7" brief="The sai_sdma_record_playback example shows how to use sai driver with SDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM/DDR using SDMA channel." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/evkmimx8mp/driver_examples/sai/sdma_record_playback">
          <external path="boards/evkmimx8mp/driver_examples/sai/sdma_record_playback" type="xml">
            <files mask="sai_sdma_record_playback_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_sai_interrupt_transfer_cm7" name="sai_interrupt_transfer_cm7" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/evkmimx8mp/driver_examples/sai/interrupt_transfer">
          <external path="boards/evkmimx8mp/driver_examples/sai/interrupt_transfer" type="xml">
            <files mask="sai_interrupt_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_sai_interrupt_record_playback_cm7" name="sai_interrupt_record_playback_cm7" brief="The sai_interrupt_record_playback example shows how to use sai driver with record and playback features: In this example, one sai instance record the audio data from input and playbacks the audio data." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/evkmimx8mp/driver_examples/sai/interrupt_record_playback">
          <external path="boards/evkmimx8mp/driver_examples/sai/interrupt_record_playback" type="xml">
            <files mask="sai_interrupt_record_playback_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_rdc_cm7" name="rdc_cm7" brief="The RDC example shows how to control the peripheral and memory regionasscess policy using RDC and RDC_SEMA42" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/rdc" path="boards/evkmimx8mp/driver_examples/rdc">
          <external path="boards/evkmimx8mp/driver_examples/rdc" type="xml">
            <files mask="rdc_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_pdm_sdma_transfer_cm7" name="pdm_sdma_transfer_cm7" brief="The pdm_sdma_transfer example shows how to use pdm driver with SDMA" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mp/driver_examples/pdm/pdm_sdma_transfer">
          <external path="boards/evkmimx8mp/driver_examples/pdm/pdm_sdma_transfer" type="xml">
            <files mask="pdm_sdma_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_pdm_sai_sdma_cm7" name="pdm_sai_sdma_cm7" brief="The pdm_sai_sdma example shows how to use pdm sdma driver together with sai sdma driver" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mp/driver_examples/pdm/pdm_sai_sdma">
          <external path="boards/evkmimx8mp/driver_examples/pdm/pdm_sai_sdma" type="xml">
            <files mask="pdm_sai_sdma_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_pdm_sai_interrupt_transfer_cm7" name="pdm_sai_interrupt_transfer_cm7" brief="The pdm_sdma_transfer example shows how to use pdm driver with interrupt transaction api:In this example, one sai instance loopback the audio data that recieve from PDM." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mp/driver_examples/pdm/pdm_sai_interrupt_transfer">
          <external path="boards/evkmimx8mp/driver_examples/pdm/pdm_sai_interrupt_transfer" type="xml">
            <files mask="pdm_sai_interrupt_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_pdm_sai_interrupt_cm7" name="pdm_sai_interrupt_cm7" brief="The pdm_sdma_transfer example shows how to use pdm driver with interrupt:In this example, one sai instance loopback the audio data that recieve from PDM." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mp/driver_examples/pdm/pdm_sai_interrupt">
          <external path="boards/evkmimx8mp/driver_examples/pdm/pdm_sai_interrupt" type="xml">
            <files mask="pdm_sai_interrupt_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_pdm_interrupt_cm7" name="pdm_interrupt_cm7" brief="The pdm_interrupt example shows how to use pdm driver with interrupt:In this example, one pdm instance playbacks the audio data stored in flash using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mp/driver_examples/pdm/pdm_interrupt">
          <external path="boards/evkmimx8mp/driver_examples/pdm/pdm_interrupt" type="xml">
            <files mask="pdm_interrupt_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_pdm_hwvad_cm7" name="pdm_hwvad_cm7" brief="The pdm_hwvad example shows how to use pdm driver with interrupt:In this example, one pdm instance playbacks the audio data stored in flash using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mp/driver_examples/pdm/pdm_hwvad">
          <external path="boards/evkmimx8mp/driver_examples/pdm/pdm_hwvad" type="xml">
            <files mask="pdm_hwvad_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_iuart_sdma_transfer_cm7" name="iuart_sdma_transfer_cm7" brief="The uart_sdma example shows how to use uart driver in sdma way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mp/driver_examples/uart/sdma_transfer">
          <external path="boards/evkmimx8mp/driver_examples/uart/sdma_transfer" type="xml">
            <files mask="iuart_sdma_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_iuart_polling_cm7" name="iuart_polling_cm7" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mp/driver_examples/uart/polling">
          <external path="boards/evkmimx8mp/driver_examples/uart/polling" type="xml">
            <files mask="iuart_polling_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_iuart_interrupt_transfer_cm7" name="iuart_interrupt_transfer_cm7" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mp/driver_examples/uart/interrupt_transfer">
          <external path="boards/evkmimx8mp/driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="iuart_interrupt_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_iuart_interrupt_rb_transfer_cm7" name="iuart_interrupt_rb_transfer_cm7" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mp/driver_examples/uart/interrupt_rb_transfer">
          <external path="boards/evkmimx8mp/driver_examples/uart/interrupt_rb_transfer" type="xml">
            <files mask="iuart_interrupt_rb_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_iuart_interrupt_cm7" name="iuart_interrupt_cm7" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mp/driver_examples/uart/interrupt">
          <external path="boards/evkmimx8mp/driver_examples/uart/interrupt" type="xml">
            <files mask="iuart_interrupt_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_iuart_idle_detect_sdma_transfer_cm7" name="iuart_idle_detect_sdma_transfer_cm7" brief="The uart_idle_detect_sdma example shows how to use uart driver in sdma way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Uart will receive 8 characters every time, but if the character is less then 8, the idleline interrupt will generate, and abort the SDMA receive operation, and send out the receivedcharacters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mp/driver_examples/uart/idle_detect_sdma_transfer">
          <external path="boards/evkmimx8mp/driver_examples/uart/idle_detect_sdma_transfer" type="xml">
            <files mask="iuart_idle_detect_sdma_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_iuart_auto_baudrate_detect_cm7" name="iuart_auto_baudrate_detect_cm7" brief="The uart_auto_baudrate_detect example shows how to use uart auto baud rate detect feature:In this example, one uart instance connect to PC through uart. First, we should send characters a or A to board. The boars will set baud rate automatic. After baud rate has set, the board will send back all characters that PCsend to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mp/driver_examples/uart/auto_baudrate_detect">
          <external path="boards/evkmimx8mp/driver_examples/uart/auto_baudrate_detect" type="xml">
            <files mask="iuart_auto_baudrate_detect_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ipwm_cm7" name="ipwm_cm7" brief="The PWM project is a simple demonstration program of the SDK PWM driver. It sets up the PWM hardwareblock to output PWM signals on one PWM channel. The example also shows PWM duty cycle is increase or decrease.The FIFO empty interrupt is provided. A new value will be loaded into FIFO when FIFO empty status bit is set. The PWM will run at the last set duty-cycle setting if all the values of the FIFO has been utilized, until the FIFO is reloaded or the PWM is disabled. When a new value is written, the duty cycle changes after the current period is over.The outputs can be observed by oscilloscope." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pwm" path="boards/evkmimx8mp/driver_examples/pwm">
          <external path="boards/evkmimx8mp/driver_examples/pwm" type="xml">
            <files mask="ipwm_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ii2c_polling_b2b_transfer_slave_cm7" name="ii2c_polling_b2b_transfer_slave_cm7" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/evkmimx8mp/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="boards/evkmimx8mp/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="ii2c_polling_b2b_transfer_slave_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ii2c_polling_b2b_transfer_master_cm7" name="ii2c_polling_b2b_transfer_master_cm7" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/evkmimx8mp/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="boards/evkmimx8mp/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="ii2c_polling_b2b_transfer_master_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ii2c_interrupt_b2b_transfer_slave_cm7" name="ii2c_interrupt_b2b_transfer_slave_cm7" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/evkmimx8mp/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="boards/evkmimx8mp/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="ii2c_interrupt_b2b_transfer_slave_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ii2c_interrupt_b2b_transfer_master_cm7" name="ii2c_interrupt_b2b_transfer_master_cm7" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/evkmimx8mp/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="boards/evkmimx8mp/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="ii2c_interrupt_b2b_transfer_master_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_igpio_led_output_cm7" name="igpio_led_output_cm7" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/evkmimx8mp/driver_examples/gpio/led_output">
          <external path="boards/evkmimx8mp/driver_examples/gpio/led_output" type="xml">
            <files mask="igpio_led_output_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_gpt_timer_cm7" name="gpt_timer_cm7" brief="The gpt_timer project is a simple demonstration program of the SDK GPT driver. It sets up the GPThardware block to trigger a periodic interrupt after every 1 second. When the GPT interrupt is triggereda message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpt" path="boards/evkmimx8mp/driver_examples/gpt/timer">
          <external path="boards/evkmimx8mp/driver_examples/gpt/timer" type="xml">
            <files mask="gpt_timer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_gpt_capture_cm7" name="gpt_capture_cm7" brief="The gpt_capture project is a simple demonstration program of the SDK GPT driver's input capture feature.The example sets up a GPT channel for rise-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpt" path="boards/evkmimx8mp/driver_examples/gpt/capture">
          <external path="boards/evkmimx8mp/driver_examples/gpt/capture" type="xml">
            <files mask="gpt_capture_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_flexcan_ping_pong_buffer_transfer_cm7" name="flexcan_ping_pong_buffer_transfer_cm7" brief="The flexcan_ping_pong_buffer_transfer example shows how to use the FlexCAN queue feature to create 2 simulate FIFOs that can receive CAN frames:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send CAN messages to Endpoint B(board B) when user input the number of CAN messages to be send in terminal. Endpoint B uses two receiving queues to receive messages in turn, and prints the message content and the receiving queue number to the terminal after any queue is full." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/evkmimx8mp/driver_examples/flexcan/ping_pong_buffer_transfer">
          <external path="boards/evkmimx8mp/driver_examples/flexcan/ping_pong_buffer_transfer" type="xml">
            <files mask="flexcan_ping_pong_buffer_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_flexcan_loopback_transfer_cm7" name="flexcan_loopback_transfer_cm7" brief="The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/evkmimx8mp/driver_examples/flexcan/loopback_transfer">
          <external path="boards/evkmimx8mp/driver_examples/flexcan/loopback_transfer" type="xml">
            <files mask="flexcan_loopback_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_flexcan_loopback_cm7" name="flexcan_loopback_cm7" brief="The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/evkmimx8mp/driver_examples/flexcan/loopback">
          <external path="boards/evkmimx8mp/driver_examples/flexcan/loopback" type="xml">
            <files mask="flexcan_loopback_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_flexcan_interrupt_transfer_cm7" name="flexcan_interrupt_transfer_cm7" brief="The flexcan_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/evkmimx8mp/driver_examples/flexcan/interrupt_transfer">
          <external path="boards/evkmimx8mp/driver_examples/flexcan/interrupt_transfer" type="xml">
            <files mask="flexcan_interrupt_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_enet_qos_txrx_ptp1588_transfer_cm7" name="enet_qos_txrx_ptp1588_transfer_cm7" brief="The example shows the way to use ENET QOS driver to receive and transmit frame in the 1588 feature required cases.1. This example shows how to initialize the ENET_QOS.2. How to get the time stamp of the PTP 1588 timer.3. How to use Get the ENET_QOS transmit and receive frame time stamp.The example transmits 20 number PTP event frame, shows the timestamp of the transmitted frame.The length, source MAC address and destination MAC address of the received frame will be print. The time stamp of the received timestamp will be print when the PTP message frame is received(the outside loopback cable can be used to see the right rx time-stamping log since we send the ptp message). " toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet_qos" path="boards/evkmimx8mp/driver_examples/enet_qos/txrx_ptp1588_transfer">
          <external path="boards/evkmimx8mp/driver_examples/enet_qos/txrx_ptp1588_transfer" type="xml">
            <files mask="enet_qos_txrx_ptp1588_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_enet_qos_txrx_multiring_transfer_cm7" name="enet_qos_txrx_multiring_transfer_cm7" brief="The example shows the way to use ENET QOS driver to receive and transmit frames supported multi-ring platforms. this example is only supported in multi-ring platform. 1. This example shows how to initialize the ENET MAC. 2. How to use ENET MAC to transmit frames in avb supported multiple-ring platforms. The example transmits 20 number frames. For simple demo, we create frames with some special definition. 1. Build transmission frames with broadcast mac address. 2. Build frames with unicast mac address 3. Send broadcast frames to ring 0 and unitcase frames to ring 1, then receive them back in associated rings." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet_qos" path="boards/evkmimx8mp/driver_examples/enet_qos/txrx_multiring_transfer">
          <external path="boards/evkmimx8mp/driver_examples/enet_qos/txrx_multiring_transfer" type="xml">
            <files mask="enet_qos_txrx_multiring_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_enet_txrx_transfer_cm7" name="enet_txrx_transfer_cm7" brief="The enet_rxtx example shows the simplest way to use ENET driver for simple frame receive and transmit.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.The example transmits 20 number broadcast frame, print the frame length, source MAC addressand destination MAC address when receive frame.Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. youcan change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="boards/evkmimx8mp/driver_examples/enet/txrx_transfer">
          <external path="boards/evkmimx8mp/driver_examples/enet/txrx_transfer" type="xml">
            <files mask="enet_txrx_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_enet_txrx_ptp1588_transfer_cm7" name="enet_txrx_ptp1588_transfer_cm7" brief="The enet_rxtx_ptp1588 example shows the way to use ENET driver to receive and transmit frame in the 1588 feature required cases.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.3. How to add to the multicast group to receive PTP 1588 message.4. How to get the time stamp of the PTP 1588 timer.4. How to use Get the ENET transmit and receive frame time stamp.The example transmits 20 number PTP event frame, shows the timestamp of the transmitted frame.The length, source MAC address and destination MAC address of the received frame will be print. The time stamp of the received timestamp will be print when the PTP message frame is received. Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. you can change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="boards/evkmimx8mp/driver_examples/enet/txrx_ptp1588_transfer">
          <external path="boards/evkmimx8mp/driver_examples/enet/txrx_ptp1588_transfer" type="xml">
            <files mask="enet_txrx_ptp1588_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_enet_txrx_multiring_transfer_cm7" name="enet_txrx_multiring_transfer_cm7" brief="The enet_txrx_multiring_transfer example shows the way to use ENET driver to   receive and transmit avb frame in the avb feature supported multi-ring platforms. this example is only supported in multi-ring platform.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to transmit frames in avb supported multiple-ring platforms.The example transmits 30 number frames. For simple demo, we create frames with some special definition.1. Build transmission frames with broadcast mac address.2. Build different frames for each ring: 10 normal ethernet frame, 10 similar IEC 61883-6 type frames,10 similar IEC 61883-8 type frames and the two IEC 1722 avb frames are set with different vlan priority. Notice, To simply show how to use three different rings in rx/tx on one board. This example set PHY local loop and you will see there will be PHY init auto-negotiation fail and this is normal. because phy can not finishauto-negotiation when phy is in loop back mode. However, the auto-negotiation fail has no impact on this loop back example, so just forget about the failure auto-negotiation." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="boards/evkmimx8mp/driver_examples/enet/txrx_multiring_transfer">
          <external path="boards/evkmimx8mp/driver_examples/enet/txrx_multiring_transfer" type="xml">
            <files mask="enet_txrx_multiring_transfer_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ecspi_polling_b2b_transfer_slave_cm7" name="ecspi_polling_b2b_transfer_slave_cm7" brief="The ecspi_polling_b2b_transfer example shows how to use ECSPI driver in polling way:In this example , we need two boards, one board used as ECSPI master and another board used as ECSPI slave.The file 'ecspi_polling_b2b_transfer_slave.c' includes the ECSPI slave code.1. ECSPI master send/received data to/from ECSPI slave in polling . (ECSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mp/driver_examples/ecspi/polling_b2b_transfer/slave">
          <external path="boards/evkmimx8mp/driver_examples/ecspi/polling_b2b_transfer/slave" type="xml">
            <files mask="ecspi_polling_b2b_transfer_slave_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ecspi_polling_b2b_transfer_master_cm7" name="ecspi_polling_b2b_transfer_master_cm7" brief="The ecspi_polling_b2b_transfer example shows how to use ECSPI driver in polling way:In this example , we need two boards, one board used as ECSPI master and another board used as ECSPI slave.The file 'ecspi_polling_b2b_transfer_master.c' includes the ECSPI master code.1. ECSPI master send/received data to/from ECSPI slave in polling . (ECSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mp/driver_examples/ecspi/polling_b2b_transfer/master">
          <external path="boards/evkmimx8mp/driver_examples/ecspi/polling_b2b_transfer/master" type="xml">
            <files mask="ecspi_polling_b2b_transfer_master_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ecspi_interrupt_b2b_transfer_slave_cm7" name="ecspi_interrupt_b2b_transfer_slave_cm7" brief="The ecspi_interrupt_b2b_transfer example shows how to use ECSPI driver in interrupt way:In this example , we need two boards, one board used as ECSPI master and another board used as ECSPI slave.The file 'ecspi_interrupt_b2b_transfer_slave.c' includes the ECSPI slave code.This example uses the transactional API in ECSPI driver.1. ECSPI master send/received data to/from ECSPI slave in interrupt . (ECSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mp/driver_examples/ecspi/interrupt_b2b_transfer/slave">
          <external path="boards/evkmimx8mp/driver_examples/ecspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="ecspi_interrupt_b2b_transfer_slave_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ecspi_interrupt_b2b_transfer_master_cm7" name="ecspi_interrupt_b2b_transfer_master_cm7" brief="The ecspi_interrupt_b2b_transfer example shows how to use ECSPI driver in interrupt way:In this example , we need two boards, one board used as ECSPI master and another board used as ECSPI slave.The file 'ecspi_interrupt_b2b_transfer_master.c' includes the ECSPI master code.This example uses the transactional API in ECSPI driver.1. ECSPI master send/received data to/from ECSPI slave in interrupt . (ECSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mp/driver_examples/ecspi/interrupt_b2b_transfer/master">
          <external path="boards/evkmimx8mp/driver_examples/ecspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="ecspi_interrupt_b2b_transfer_master_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_ecspi_loopback_cm7" name="ecspi_loopback_cm7" brief="The ecspi_loopback demo shows how the ecspi do a loopback transfer internally.The ECSPI connects the transmitter and receiver sections internally, and the data shifted out from the most-significant bit of the shift register is looped back into the least-significant bit of the Shift register. In this way, a self-test of the complete transmit/receive path can be made. The output pins are not affected, and the input pins are ignored." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mp/driver_examples/ecspi/ecspi_loopback">
          <external path="boards/evkmimx8mp/driver_examples/ecspi/ecspi_loopback" type="xml">
            <files mask="ecspi_loopback_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_easrc_p2p_out_sdma_cm7" name="easrc_p2p_out_sdma_cm7" brief="The asrc_p2p_out_sdma example shows how to use asrc driver with SDMA :In this example, one asrc instance convert audio data and push to sai directly." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/asrc" path="boards/evkmimx8mp/driver_examples/asrc/asrc_p2p_out_sdma">
          <external path="boards/evkmimx8mp/driver_examples/asrc/asrc_p2p_out_sdma" type="xml">
            <files mask="easrc_p2p_out_sdma_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_easrc_m2m_sdma_cm7" name="easrc_m2m_sdma_cm7" brief="The asrc_m2m_sdma example shows how to use asrc driver with SDMA:In this example, one asrc instance convert the audio data stored in ram using SDMA channel." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/asrc" path="boards/evkmimx8mp/driver_examples/asrc/asrc_m2m_sdma">
          <external path="boards/evkmimx8mp/driver_examples/asrc/asrc_m2m_sdma" type="xml">
            <files mask="easrc_m2m_sdma_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_easrc_m2m_polling_cm7" name="easrc_m2m_polling_cm7" brief="The asrc_m2m_polling example shows how to use ASRC driver with polling:In this example, one ASRC instance convert audio data and store it in ram using polling." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/asrc" path="boards/evkmimx8mp/driver_examples/asrc/asrc_m2m_polling">
          <external path="boards/evkmimx8mp/driver_examples/asrc/asrc_m2m_polling" type="xml">
            <files mask="easrc_m2m_polling_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_hello_world_cm7" name="hello_world_cm7" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/evkmimx8mp/demo_apps/hello_world">
          <external path="boards/evkmimx8mp/demo_apps/hello_world" type="xml">
            <files mask="hello_world_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_sai_low_power_audio_cm7" name="sai_low_power_audio_cm7" brief="In this demo, A core decoded music data and put it to DDR buffer and informs M core with the related information. Then M core will take the ownership of consuming the buffer, it will copy buffer from DDR to TCM, manipulating SDMA to transfer the data to SAI and codec for playback. It gives DDR and A core opportunity to do power saving for rather long time frame. M core core will also take ownership of codec initialization. SRTM(Simplified Real Time Messaging) protocol is used to communicate between A core an M4 core. " toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/evkmimx8mp/demo_apps/sai_low_power_audio">
          <external path="boards/evkmimx8mp/demo_apps/sai_low_power_audio" type="xml">
            <files mask="sai_low_power_audio_cm7_v3_15.xml"/>
          </external>
        </example>
        <example id="evkmimx8mp_low_power_wakeword_cm7" name="low_power_wakeword_cm7" brief="In this demo, M core receives audio from microphones and provide them to Linux on Cortex A in DDR and notifies it through RPMSG protocol. If Linux is suspended, the audio is processed locally with wakeword detection algorithm. When voice algorithms triggers, then A core is resumed and audio streaming from M core to A core restarts. When Cortex A is running, music playback from A core can also be sent to M core through DDR and RPMSG protocol but no playback is supported when M core only is running. " toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/evkmimx8mp/demo_apps/low_power_wakeword">
          <external path="boards/evkmimx8mp/demo_apps/low_power_wakeword" type="xml">
            <files mask="low_power_wakeword_cm7_v3_15.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MIMX8ML8xxxKZ" name="MIMX8ML8" version="1.0.0" full_name="MIMX8ML8xxxKZ" family="MIMX8MLx" platform="i.MX">
      <description>i.MX8ML</description>
      <metadataSet>
        <metadata key="compatible_device.segger" value="MIMX8ML8_M7"/>
        <metadata key="compatible_device.pemicro" value="MIMX8ML8"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <defines>
        <define name="CPU_$|package|" value=""/>
        <define name="CPU_$|package|_$|core|" value=""/>
      </defines>
      <core id="cm7_MIMX8ML8xxxKZ" name="cm7" fpu="true" type="cm7" mpu="true"/>
      <memory>
        <memoryBlock id="SRAM_UPPER_MIMX8ML8xxxKZ" name="SRAM_UPPER" addr="20000000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MIMX8ML8xxxKZ" name="SRAM_LOWER" addr="00000000" size="00020000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="256"/>
      <package id="MIMX8ML8CVNKZ" name="MIMX8ML8CVNKZ"/>
      <evaluation_boards>
        <evaluation_board name="evkmimx8mp"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.MIMX8ML8xxxKZ" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.MIMX8ML8xxxKZ" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.MIMX8ML8xxxKZ" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MIMX8ML8xxxKZ" name="internal.has_swo" value="false"/>
          </params>
          <drivers>
            <driver id_refs="QSPI_FLASH_MIMX8ML8xxxKZ">
              <driverBinary path="devices/MIMX8ML8/mcuxpresso" type="binary">
                <files mask="flash_driver_placeholder.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
    <device id="MIMX8ML8xxxLZ" name="MIMX8ML8" version="1.0.0" full_name="MIMX8ML8xxxLZ" family="MIMX8MLx" platform="i.MX">
      <description>i.MX8ML</description>
      <metadataSet>
        <metadata key="compatible_device.segger" value="MIMX8ML8_M7"/>
        <metadata key="compatible_device.pemicro" value="MIMX8ML8"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <defines>
        <define name="CPU_$|package|" value=""/>
        <define name="CPU_$|package|_$|core|" value=""/>
      </defines>
      <core id="cm7_MIMX8ML8xxxLZ" name="cm7" fpu="true" type="cm7" mpu="true"/>
      <memory>
        <memoryBlock id="SRAM_UPPER_MIMX8ML8xxxLZ" name="SRAM_UPPER" addr="20000000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MIMX8ML8xxxLZ" name="SRAM_LOWER" addr="00000000" size="00020000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="256"/>
      <package id="MIMX8ML8DVNLZ" name="MIMX8ML8DVNLZ"/>
      <evaluation_boards>
        <evaluation_board name="evkmimx8mp"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.MIMX8ML8xxxLZ" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.MIMX8ML8xxxLZ" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.MIMX8ML8xxxLZ" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MIMX8ML8xxxLZ" name="internal.has_swo" value="false"/>
          </params>
          <drivers>
            <driver id_refs="QSPI_FLASH_MIMX8ML8xxxLZ">
              <driverBinary path="devices/MIMX8ML8/mcuxpresso" type="binary">
                <files mask="flash_driver_placeholder.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.evkmimx8mp.MIMX8ML8" name="evkmimx8mp" brief="Board_project_template evkmimx8mp" version="1.0.0" full_name="Board_project_template evkmimx8mp" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="boards/evkmimx8mp/project_template" project_base_path="board">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <any_of>
            <all>
              <component_dependency value="platform.utilities.assert.MIMX8ML8"/>
              <component_dependency value="utility.debug_console.MIMX8ML8"/>
              <component_dependency value="utility.debug_console_template_config.MIMX8ML8"/>
              <component_dependency value="component.serial_manager.MIMX8ML8"/>
              <component_dependency value="component.serial_manager_uart.MIMX8ML8"/>
            </all>
            <all>
              <component_dependency value="platform.utilities.assert_lite.MIMX8ML8"/>
              <component_dependency value="utility.debug_console_lite.MIMX8ML8"/>
            </all>
          </any_of>
          <component_dependency value="device.MIMX8ML8_CMSIS.MIMX8ML8"/>
          <component_dependency value="device.MIMX8ML8_startup.MIMX8ML8"/>
          <component_dependency value="driver.audiomix.MIMX8ML8"/>
          <component_dependency value="platform.drivers.clock.MIMX8ML8"/>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
          <component_dependency value="platform.drivers.iuart.MIMX8ML8"/>
          <component_dependency value="platform.drivers.rdc.MIMX8ML8"/>
          <board_dependency value="evkmimx8mp"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_audiomix.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_audiomix.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="board_project_template.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.MIMX8ML8_debugger.MIMX8ML8" name="Device MIMX8ML8_debugger" brief="Device MIMX8ML8_debugger" version="1.0.0" full_name="Device MIMX8ML8_debugger" category="Device/SDK Utilities" user_visible="true" type="debugger" package_base_path="devices/MIMX8ML8" project_base_path="svd">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="xml">
        <files mask="MIMX8ML8_cm7.xml"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MIMX8ML8" name="clock" brief="Clock Driver" version="2.2.0" full_name="Clock Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_clock.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iomuxc.MIMX8ML8" name="iomuxc" brief="IOMUXC Driver" version="2.0.4" full_name="IOMUXC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iomuxc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_iomuxc.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.memory.MIMX8ML8" name="memory" brief="MEMORY Driver" version="2.0.1" full_name="Memory Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_memory.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_memory.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.audiomix.MIMX8ML8" name="audiomix" brief="AUDIOMIX Driver" version="2.0.1" full_name="AUDIOMIX Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_audiomix.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_audiomix.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_audiomix.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="tools.MIMX8ML8" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" category="Device/SDK Utilities" user_visible="true" type="other" package_base_path="tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="xclang.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="mcux_config.cmake"/>
        <files mask="riscvllvm.cmake"/>
      </source>
    </component>
    <component id="CMSIS_DSP_Include.MIMX8ML8" name="CMSIS_DSP_Library_Header" brief="CMSIS-DSP Library Header" version="1.16.2" full_name="CMSIS DSP Library Header" category="CMSIS/DSP" user_visible="true" type="CMSIS_driver" package_base_path="CMSIS/DSP" project_base_path="CMSIS/DSP">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_common_tables_f16.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_const_structs_f16.h"/>
        <files mask="arm_helium_utils.h"/>
        <files mask="arm_math.h"/>
        <files mask="arm_math_f16.h"/>
        <files mask="arm_math_memory.h"/>
        <files mask="arm_math_types.h"/>
        <files mask="arm_math_types_f16.h"/>
        <files mask="arm_mve_tables.h"/>
        <files mask="arm_mve_tables_f16.h"/>
        <files mask="arm_vec_math.h"/>
        <files mask="arm_vec_math_f16.h"/>
      </source>
      <source relative_path="Include/dsp" type="c_include">
        <files mask="basic_math_functions.h"/>
        <files mask="basic_math_functions_f16.h"/>
        <files mask="bayes_functions.h"/>
        <files mask="bayes_functions_f16.h"/>
        <files mask="complex_math_functions.h"/>
        <files mask="complex_math_functions_f16.h"/>
        <files mask="controller_functions.h"/>
        <files mask="controller_functions_f16.h"/>
        <files mask="debug.h"/>
        <files mask="distance_functions.h"/>
        <files mask="distance_functions_f16.h"/>
        <files mask="fast_math_functions.h"/>
        <files mask="fast_math_functions_f16.h"/>
        <files mask="filtering_functions.h"/>
        <files mask="filtering_functions_f16.h"/>
        <files mask="interpolation_functions.h"/>
        <files mask="interpolation_functions_f16.h"/>
        <files mask="matrix_functions.h"/>
        <files mask="matrix_functions_f16.h"/>
        <files mask="matrix_utils.h"/>
        <files mask="none.h"/>
        <files mask="quaternion_math_functions.h"/>
        <files mask="statistics_functions.h"/>
        <files mask="statistics_functions_f16.h"/>
        <files mask="support_functions.h"/>
        <files mask="support_functions_f16.h"/>
        <files mask="svm_defines.h"/>
        <files mask="svm_functions.h"/>
        <files mask="svm_functions_f16.h"/>
        <files mask="transform_functions.h"/>
        <files mask="transform_functions_f16.h"/>
        <files mask="utils.h"/>
        <files mask="window_functions.h"/>
      </source>
      <source relative_path="PrivateInclude" type="c_include">
        <files mask="arm_sorting.h"/>
        <files mask="arm_vec_fft.h"/>
        <files mask="arm_vec_filtering.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_DSP_Include.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="PrivateInclude" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
        <include_path relative_path="PrivateInclude" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_DSP_Source.MIMX8ML8" name="CMSIS_DSP_Library_Source" brief="CMSIS-DSP Library" version="1.16.2" full_name="CMSIS DSP Library Source" category="CMSIS/DSP" user_visible="true" type="CMSIS_driver" package_base_path="CMSIS/DSP" project_base_path="CMSIS/DSP">
      <defines>
        <define name="DISABLEFLOAT16" value=""/>
      </defines>
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_common_tables_f16.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_const_structs_f16.h"/>
        <files mask="arm_helium_utils.h"/>
        <files mask="arm_math.h"/>
        <files mask="arm_math_f16.h"/>
        <files mask="arm_math_memory.h"/>
        <files mask="arm_math_types.h"/>
        <files mask="arm_math_types_f16.h"/>
        <files mask="arm_mve_tables.h"/>
        <files mask="arm_mve_tables_f16.h"/>
        <files mask="arm_vec_math.h"/>
        <files mask="arm_vec_math_f16.h"/>
      </source>
      <source relative_path="Include/dsp" type="c_include">
        <files mask="basic_math_functions.h"/>
        <files mask="basic_math_functions_f16.h"/>
        <files mask="bayes_functions.h"/>
        <files mask="bayes_functions_f16.h"/>
        <files mask="complex_math_functions.h"/>
        <files mask="complex_math_functions_f16.h"/>
        <files mask="controller_functions.h"/>
        <files mask="controller_functions_f16.h"/>
        <files mask="debug.h"/>
        <files mask="distance_functions.h"/>
        <files mask="distance_functions_f16.h"/>
        <files mask="fast_math_functions.h"/>
        <files mask="fast_math_functions_f16.h"/>
        <files mask="filtering_functions.h"/>
        <files mask="filtering_functions_f16.h"/>
        <files mask="interpolation_functions.h"/>
        <files mask="interpolation_functions_f16.h"/>
        <files mask="matrix_functions.h"/>
        <files mask="matrix_functions_f16.h"/>
        <files mask="matrix_utils.h"/>
        <files mask="none.h"/>
        <files mask="quaternion_math_functions.h"/>
        <files mask="statistics_functions.h"/>
        <files mask="statistics_functions_f16.h"/>
        <files mask="support_functions.h"/>
        <files mask="support_functions_f16.h"/>
        <files mask="svm_defines.h"/>
        <files mask="svm_functions.h"/>
        <files mask="svm_functions_f16.h"/>
        <files mask="transform_functions.h"/>
        <files mask="transform_functions_f16.h"/>
        <files mask="utils.h"/>
        <files mask="window_functions.h"/>
      </source>
      <source relative_path="PrivateInclude" type="c_include">
        <files mask="arm_sorting.h"/>
        <files mask="arm_vec_fft.h"/>
        <files mask="arm_vec_filtering.h"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="BasicMathFunctions.c"/>
        <files mask="BasicMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_abs_f32.c"/>
        <files mask="arm_abs_f64.c"/>
        <files mask="arm_abs_q15.c"/>
        <files mask="arm_abs_q31.c"/>
        <files mask="arm_abs_q7.c"/>
        <files mask="arm_add_f32.c"/>
        <files mask="arm_add_f64.c"/>
        <files mask="arm_add_q15.c"/>
        <files mask="arm_add_q31.c"/>
        <files mask="arm_add_q7.c"/>
        <files mask="arm_and_u16.c"/>
        <files mask="arm_and_u32.c"/>
        <files mask="arm_and_u8.c"/>
        <files mask="arm_clip_f32.c"/>
        <files mask="arm_clip_q15.c"/>
        <files mask="arm_clip_q31.c"/>
        <files mask="arm_clip_q7.c"/>
        <files mask="arm_dot_prod_f32.c"/>
        <files mask="arm_dot_prod_f64.c"/>
        <files mask="arm_dot_prod_q15.c"/>
        <files mask="arm_dot_prod_q31.c"/>
        <files mask="arm_dot_prod_q7.c"/>
        <files mask="arm_mult_f32.c"/>
        <files mask="arm_mult_f64.c"/>
        <files mask="arm_mult_q15.c"/>
        <files mask="arm_mult_q31.c"/>
        <files mask="arm_mult_q7.c"/>
        <files mask="arm_negate_f32.c"/>
        <files mask="arm_negate_f64.c"/>
        <files mask="arm_negate_q15.c"/>
        <files mask="arm_negate_q31.c"/>
        <files mask="arm_negate_q7.c"/>
        <files mask="arm_not_u16.c"/>
        <files mask="arm_not_u32.c"/>
        <files mask="arm_not_u8.c"/>
        <files mask="arm_offset_f32.c"/>
        <files mask="arm_offset_f64.c"/>
        <files mask="arm_offset_q15.c"/>
        <files mask="arm_offset_q31.c"/>
        <files mask="arm_offset_q7.c"/>
        <files mask="arm_or_u16.c"/>
        <files mask="arm_or_u32.c"/>
        <files mask="arm_or_u8.c"/>
        <files mask="arm_scale_f32.c"/>
        <files mask="arm_scale_f64.c"/>
        <files mask="arm_scale_q15.c"/>
        <files mask="arm_scale_q31.c"/>
        <files mask="arm_scale_q7.c"/>
        <files mask="arm_shift_q15.c"/>
        <files mask="arm_shift_q31.c"/>
        <files mask="arm_shift_q7.c"/>
        <files mask="arm_sub_f32.c"/>
        <files mask="arm_sub_f64.c"/>
        <files mask="arm_sub_q15.c"/>
        <files mask="arm_sub_q31.c"/>
        <files mask="arm_sub_q7.c"/>
        <files mask="arm_xor_u16.c"/>
        <files mask="arm_xor_u32.c"/>
        <files mask="arm_xor_u8.c"/>
        <files mask="arm_abs_f16.c"/>
        <files mask="arm_add_f16.c"/>
        <files mask="arm_clip_f16.c"/>
        <files mask="arm_dot_prod_f16.c"/>
        <files mask="arm_mult_f16.c"/>
        <files mask="arm_negate_f16.c"/>
        <files mask="arm_offset_f16.c"/>
        <files mask="arm_scale_f16.c"/>
        <files mask="arm_sub_f16.c"/>
      </source>
      <source relative_path="Source/BayesFunctions" type="src">
        <files mask="BayesFunctions.c"/>
        <files mask="BayesFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/BayesFunctions" type="src">
        <files mask="arm_gaussian_naive_bayes_predict_f32.c"/>
        <files mask="arm_gaussian_naive_bayes_predict_f16.c"/>
      </source>
      <source relative_path="Source/CommonTables" type="src">
        <files mask="CommonTables.c"/>
        <files mask="CommonTablesF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/CommonTables" type="src">
        <files mask="arm_common_tables.c"/>
        <files mask="arm_const_structs.c"/>
        <files mask="arm_mve_tables.c"/>
        <files mask="arm_common_tables_f16.c"/>
        <files mask="arm_const_structs_f16.c"/>
        <files mask="arm_mve_tables_f16.c"/>
      </source>
      <source relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="ComplexMathFunctions.c"/>
        <files mask="ComplexMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="arm_cmplx_conj_f32.c"/>
        <files mask="arm_cmplx_conj_q15.c"/>
        <files mask="arm_cmplx_conj_q31.c"/>
        <files mask="arm_cmplx_dot_prod_f32.c"/>
        <files mask="arm_cmplx_dot_prod_q15.c"/>
        <files mask="arm_cmplx_dot_prod_q31.c"/>
        <files mask="arm_cmplx_mag_f32.c"/>
        <files mask="arm_cmplx_mag_f64.c"/>
        <files mask="arm_cmplx_mag_fast_q15.c"/>
        <files mask="arm_cmplx_mag_q15.c"/>
        <files mask="arm_cmplx_mag_q31.c"/>
        <files mask="arm_cmplx_mag_squared_f32.c"/>
        <files mask="arm_cmplx_mag_squared_f64.c"/>
        <files mask="arm_cmplx_mag_squared_q15.c"/>
        <files mask="arm_cmplx_mag_squared_q31.c"/>
        <files mask="arm_cmplx_mult_cmplx_f32.c"/>
        <files mask="arm_cmplx_mult_cmplx_f64.c"/>
        <files mask="arm_cmplx_mult_cmplx_q15.c"/>
        <files mask="arm_cmplx_mult_cmplx_q31.c"/>
        <files mask="arm_cmplx_mult_real_f32.c"/>
        <files mask="arm_cmplx_mult_real_q15.c"/>
        <files mask="arm_cmplx_mult_real_q31.c"/>
        <files mask="arm_cmplx_conj_f16.c"/>
        <files mask="arm_cmplx_dot_prod_f16.c"/>
        <files mask="arm_cmplx_mag_f16.c"/>
        <files mask="arm_cmplx_mag_squared_f16.c"/>
        <files mask="arm_cmplx_mult_cmplx_f16.c"/>
        <files mask="arm_cmplx_mult_real_f16.c"/>
      </source>
      <source relative_path="Source/ControllerFunctions" type="src">
        <files mask="ControllerFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/ControllerFunctions" type="src">
        <files mask="arm_pid_init_f32.c"/>
        <files mask="arm_pid_init_q15.c"/>
        <files mask="arm_pid_init_q31.c"/>
        <files mask="arm_pid_reset_f32.c"/>
        <files mask="arm_pid_reset_q15.c"/>
        <files mask="arm_pid_reset_q31.c"/>
        <files mask="arm_sin_cos_f32.c"/>
        <files mask="arm_sin_cos_q31.c"/>
      </source>
      <source relative_path="Source/DistanceFunctions" type="src">
        <files mask="DistanceFunctions.c"/>
        <files mask="DistanceFunctionsF16.c"/>
      </source>
      <source relative_path="Source/DistanceFunctions" type="c_include">
        <files mask="arm_boolean_distance_template.h"/>
      </source>
      <source exclude="true" relative_path="Source/DistanceFunctions" type="src">
        <files mask="arm_boolean_distance.c"/>
        <files mask="arm_braycurtis_distance_f32.c"/>
        <files mask="arm_canberra_distance_f32.c"/>
        <files mask="arm_chebyshev_distance_f32.c"/>
        <files mask="arm_chebyshev_distance_f64.c"/>
        <files mask="arm_cityblock_distance_f32.c"/>
        <files mask="arm_cityblock_distance_f64.c"/>
        <files mask="arm_correlation_distance_f32.c"/>
        <files mask="arm_cosine_distance_f32.c"/>
        <files mask="arm_cosine_distance_f64.c"/>
        <files mask="arm_dice_distance.c"/>
        <files mask="arm_dtw_distance_f32.c"/>
        <files mask="arm_dtw_init_window_q7.c"/>
        <files mask="arm_dtw_path_f32.c"/>
        <files mask="arm_euclidean_distance_f32.c"/>
        <files mask="arm_euclidean_distance_f64.c"/>
        <files mask="arm_hamming_distance.c"/>
        <files mask="arm_jaccard_distance.c"/>
        <files mask="arm_jensenshannon_distance_f32.c"/>
        <files mask="arm_kulsinski_distance.c"/>
        <files mask="arm_minkowski_distance_f32.c"/>
        <files mask="arm_rogerstanimoto_distance.c"/>
        <files mask="arm_russellrao_distance.c"/>
        <files mask="arm_sokalmichener_distance.c"/>
        <files mask="arm_sokalsneath_distance.c"/>
        <files mask="arm_yule_distance.c"/>
        <files mask="arm_braycurtis_distance_f16.c"/>
        <files mask="arm_chebyshev_distance_f16.c"/>
        <files mask="arm_canberra_distance_f16.c"/>
        <files mask="arm_cityblock_distance_f16.c"/>
        <files mask="arm_correlation_distance_f16.c"/>
        <files mask="arm_cosine_distance_f16.c"/>
        <files mask="arm_euclidean_distance_f16.c"/>
        <files mask="arm_jensenshannon_distance_f16.c"/>
        <files mask="arm_minkowski_distance_f16.c"/>
      </source>
      <source relative_path="Source/FastMathFunctions" type="src">
        <files mask="FastMathFunctions.c"/>
        <files mask="FastMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/FastMathFunctions" type="src">
        <files mask="arm_atan2_f32.c"/>
        <files mask="arm_atan2_q15.c"/>
        <files mask="arm_atan2_q31.c"/>
        <files mask="arm_cos_f32.c"/>
        <files mask="arm_cos_q15.c"/>
        <files mask="arm_cos_q31.c"/>
        <files mask="arm_divide_q15.c"/>
        <files mask="arm_divide_q31.c"/>
        <files mask="arm_sin_f32.c"/>
        <files mask="arm_sin_q15.c"/>
        <files mask="arm_sin_q31.c"/>
        <files mask="arm_sqrt_q15.c"/>
        <files mask="arm_sqrt_q31.c"/>
        <files mask="arm_vexp_f32.c"/>
        <files mask="arm_vexp_f64.c"/>
        <files mask="arm_vlog_f32.c"/>
        <files mask="arm_vlog_f64.c"/>
        <files mask="arm_vlog_q15.c"/>
        <files mask="arm_vlog_q31.c"/>
        <files mask="arm_atan2_f16.c"/>
        <files mask="arm_vexp_f16.c"/>
        <files mask="arm_vinverse_f16.c"/>
        <files mask="arm_vlog_f16.c"/>
      </source>
      <source relative_path="Source/FilteringFunctions" type="src">
        <files mask="FilteringFunctions.c"/>
        <files mask="FilteringFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/FilteringFunctions" type="src">
        <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f32.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
        <files mask="arm_biquad_cascade_df1_init_f32.c"/>
        <files mask="arm_biquad_cascade_df1_init_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_q15.c"/>
        <files mask="arm_biquad_cascade_df1_q31.c"/>
        <files mask="arm_biquad_cascade_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_f64.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
        <files mask="arm_conv_f32.c"/>
        <files mask="arm_conv_fast_opt_q15.c"/>
        <files mask="arm_conv_fast_q15.c"/>
        <files mask="arm_conv_fast_q31.c"/>
        <files mask="arm_conv_opt_q15.c"/>
        <files mask="arm_conv_opt_q7.c"/>
        <files mask="arm_conv_partial_f32.c"/>
        <files mask="arm_conv_partial_fast_opt_q15.c"/>
        <files mask="arm_conv_partial_fast_q15.c"/>
        <files mask="arm_conv_partial_fast_q31.c"/>
        <files mask="arm_conv_partial_opt_q15.c"/>
        <files mask="arm_conv_partial_opt_q7.c"/>
        <files mask="arm_conv_partial_q15.c"/>
        <files mask="arm_conv_partial_q31.c"/>
        <files mask="arm_conv_partial_q7.c"/>
        <files mask="arm_conv_q15.c"/>
        <files mask="arm_conv_q31.c"/>
        <files mask="arm_conv_q7.c"/>
        <files mask="arm_correlate_f32.c"/>
        <files mask="arm_correlate_f64.c"/>
        <files mask="arm_correlate_fast_opt_q15.c"/>
        <files mask="arm_correlate_fast_q15.c"/>
        <files mask="arm_correlate_fast_q31.c"/>
        <files mask="arm_correlate_opt_q15.c"/>
        <files mask="arm_correlate_opt_q7.c"/>
        <files mask="arm_correlate_q15.c"/>
        <files mask="arm_correlate_q31.c"/>
        <files mask="arm_correlate_q7.c"/>
        <files mask="arm_fir_decimate_f32.c"/>
        <files mask="arm_fir_decimate_fast_q15.c"/>
        <files mask="arm_fir_decimate_fast_q31.c"/>
        <files mask="arm_fir_decimate_init_f32.c"/>
        <files mask="arm_fir_decimate_init_q15.c"/>
        <files mask="arm_fir_decimate_init_q31.c"/>
        <files mask="arm_fir_decimate_q15.c"/>
        <files mask="arm_fir_decimate_q31.c"/>
        <files mask="arm_fir_f32.c"/>
        <files mask="arm_fir_f64.c"/>
        <files mask="arm_fir_fast_q15.c"/>
        <files mask="arm_fir_fast_q31.c"/>
        <files mask="arm_fir_init_f32.c"/>
        <files mask="arm_fir_init_f64.c"/>
        <files mask="arm_fir_init_q15.c"/>
        <files mask="arm_fir_init_q31.c"/>
        <files mask="arm_fir_init_q7.c"/>
        <files mask="arm_fir_interpolate_f32.c"/>
        <files mask="arm_fir_interpolate_init_f32.c"/>
        <files mask="arm_fir_interpolate_init_q15.c"/>
        <files mask="arm_fir_interpolate_init_q31.c"/>
        <files mask="arm_fir_interpolate_q15.c"/>
        <files mask="arm_fir_interpolate_q31.c"/>
        <files mask="arm_fir_lattice_f32.c"/>
        <files mask="arm_fir_lattice_init_f32.c"/>
        <files mask="arm_fir_lattice_init_q15.c"/>
        <files mask="arm_fir_lattice_init_q31.c"/>
        <files mask="arm_fir_lattice_q15.c"/>
        <files mask="arm_fir_lattice_q31.c"/>
        <files mask="arm_fir_q15.c"/>
        <files mask="arm_fir_q31.c"/>
        <files mask="arm_fir_q7.c"/>
        <files mask="arm_fir_sparse_f32.c"/>
        <files mask="arm_fir_sparse_init_f32.c"/>
        <files mask="arm_fir_sparse_init_q15.c"/>
        <files mask="arm_fir_sparse_init_q31.c"/>
        <files mask="arm_fir_sparse_init_q7.c"/>
        <files mask="arm_fir_sparse_q15.c"/>
        <files mask="arm_fir_sparse_q31.c"/>
        <files mask="arm_fir_sparse_q7.c"/>
        <files mask="arm_iir_lattice_f32.c"/>
        <files mask="arm_iir_lattice_init_f32.c"/>
        <files mask="arm_iir_lattice_init_q15.c"/>
        <files mask="arm_iir_lattice_init_q31.c"/>
        <files mask="arm_iir_lattice_q15.c"/>
        <files mask="arm_iir_lattice_q31.c"/>
        <files mask="arm_levinson_durbin_f32.c"/>
        <files mask="arm_levinson_durbin_q31.c"/>
        <files mask="arm_lms_f32.c"/>
        <files mask="arm_lms_init_f32.c"/>
        <files mask="arm_lms_init_q15.c"/>
        <files mask="arm_lms_init_q31.c"/>
        <files mask="arm_lms_norm_f32.c"/>
        <files mask="arm_lms_norm_init_f32.c"/>
        <files mask="arm_lms_norm_init_q15.c"/>
        <files mask="arm_lms_norm_init_q31.c"/>
        <files mask="arm_lms_norm_q15.c"/>
        <files mask="arm_lms_norm_q31.c"/>
        <files mask="arm_lms_q15.c"/>
        <files mask="arm_lms_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f16.c"/>
        <files mask="arm_biquad_cascade_df1_init_f16.c"/>
        <files mask="arm_biquad_cascade_df2T_f16.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f16.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f16.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f16.c"/>
        <files mask="arm_correlate_f16.c"/>
        <files mask="arm_fir_f16.c"/>
        <files mask="arm_fir_init_f16.c"/>
        <files mask="arm_levinson_durbin_f16.c"/>
        <files mask="arm_fir_decimate_f64.c"/>
        <files mask="arm_fir_decimate_init_f64.c"/>
      </source>
      <source relative_path="Source/InterpolationFunctions" type="src">
        <files mask="InterpolationFunctions.c"/>
        <files mask="InterpolationFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/InterpolationFunctions" type="src">
        <files mask="arm_bilinear_interp_f32.c"/>
        <files mask="arm_bilinear_interp_q15.c"/>
        <files mask="arm_bilinear_interp_q31.c"/>
        <files mask="arm_bilinear_interp_q7.c"/>
        <files mask="arm_linear_interp_f32.c"/>
        <files mask="arm_linear_interp_q15.c"/>
        <files mask="arm_linear_interp_q31.c"/>
        <files mask="arm_linear_interp_q7.c"/>
        <files mask="arm_spline_interp_f32.c"/>
        <files mask="arm_spline_interp_init_f32.c"/>
        <files mask="arm_bilinear_interp_f16.c"/>
        <files mask="arm_linear_interp_f16.c"/>
      </source>
      <source relative_path="Source/MatrixFunctions" type="src">
        <files mask="MatrixFunctions.c"/>
        <files mask="MatrixFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/MatrixFunctions" type="src">
        <files mask="arm_householder_f32.c"/>
        <files mask="arm_householder_f64.c"/>
        <files mask="arm_mat_add_f32.c"/>
        <files mask="arm_mat_add_q15.c"/>
        <files mask="arm_mat_add_q31.c"/>
        <files mask="arm_mat_cholesky_f32.c"/>
        <files mask="arm_mat_cholesky_f64.c"/>
        <files mask="arm_mat_cmplx_mult_f32.c"/>
        <files mask="arm_mat_cmplx_mult_q15.c"/>
        <files mask="arm_mat_cmplx_mult_q31.c"/>
        <files mask="arm_mat_cmplx_trans_f32.c"/>
        <files mask="arm_mat_cmplx_trans_q15.c"/>
        <files mask="arm_mat_cmplx_trans_q31.c"/>
        <files mask="arm_mat_init_f32.c"/>
        <files mask="arm_mat_init_f64.c"/>
        <files mask="arm_mat_init_q15.c"/>
        <files mask="arm_mat_init_q31.c"/>
        <files mask="arm_mat_inverse_f32.c"/>
        <files mask="arm_mat_inverse_f64.c"/>
        <files mask="arm_mat_ldlt_f32.c"/>
        <files mask="arm_mat_ldlt_f64.c"/>
        <files mask="arm_mat_mult_f32.c"/>
        <files mask="arm_mat_mult_f64.c"/>
        <files mask="arm_mat_mult_fast_q15.c"/>
        <files mask="arm_mat_mult_fast_q31.c"/>
        <files mask="arm_mat_mult_opt_q31.c"/>
        <files mask="arm_mat_mult_q15.c"/>
        <files mask="arm_mat_mult_q31.c"/>
        <files mask="arm_mat_mult_q7.c"/>
        <files mask="arm_mat_qr_f32.c"/>
        <files mask="arm_mat_qr_f64.c"/>
        <files mask="arm_mat_scale_f32.c"/>
        <files mask="arm_mat_scale_q15.c"/>
        <files mask="arm_mat_scale_q31.c"/>
        <files mask="arm_mat_solve_lower_triangular_f32.c"/>
        <files mask="arm_mat_solve_lower_triangular_f64.c"/>
        <files mask="arm_mat_solve_upper_triangular_f32.c"/>
        <files mask="arm_mat_solve_upper_triangular_f64.c"/>
        <files mask="arm_mat_sub_f32.c"/>
        <files mask="arm_mat_sub_f64.c"/>
        <files mask="arm_mat_sub_q15.c"/>
        <files mask="arm_mat_sub_q31.c"/>
        <files mask="arm_mat_trans_f32.c"/>
        <files mask="arm_mat_trans_f64.c"/>
        <files mask="arm_mat_trans_q15.c"/>
        <files mask="arm_mat_trans_q31.c"/>
        <files mask="arm_mat_trans_q7.c"/>
        <files mask="arm_mat_vec_mult_f32.c"/>
        <files mask="arm_mat_vec_mult_q15.c"/>
        <files mask="arm_mat_vec_mult_q31.c"/>
        <files mask="arm_mat_vec_mult_q7.c"/>
        <files mask="arm_householder_f16.c"/>
        <files mask="arm_mat_add_f16.c"/>
        <files mask="arm_mat_cholesky_f16.c"/>
        <files mask="arm_mat_cmplx_mult_f16.c"/>
        <files mask="arm_mat_cmplx_trans_f16.c"/>
        <files mask="arm_mat_init_f16.c"/>
        <files mask="arm_mat_inverse_f16.c"/>
        <files mask="arm_mat_qr_f16.c"/>
        <files mask="arm_mat_mult_f16.c"/>
        <files mask="arm_mat_scale_f16.c"/>
        <files mask="arm_mat_solve_lower_triangular_f16.c"/>
        <files mask="arm_mat_solve_upper_triangular_f16.c"/>
        <files mask="arm_mat_sub_f16.c"/>
        <files mask="arm_mat_trans_f16.c"/>
        <files mask="arm_mat_vec_mult_f16.c"/>
      </source>
      <source relative_path="Source/QuaternionMathFunctions" type="src">
        <files mask="QuaternionMathFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/QuaternionMathFunctions" type="src">
        <files mask="arm_quaternion2rotation_f32.c"/>
        <files mask="arm_quaternion_conjugate_f32.c"/>
        <files mask="arm_quaternion_inverse_f32.c"/>
        <files mask="arm_quaternion_normalize_f32.c"/>
        <files mask="arm_quaternion_norm_f32.c"/>
        <files mask="arm_quaternion_product_f32.c"/>
        <files mask="arm_quaternion_product_single_f32.c"/>
        <files mask="arm_rotation2quaternion_f32.c"/>
      </source>
      <source relative_path="Source/SVMFunctions" type="src">
        <files mask="SVMFunctions.c"/>
        <files mask="SVMFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/SVMFunctions" type="src">
        <files mask="arm_svm_linear_init_f32.c"/>
        <files mask="arm_svm_linear_predict_f32.c"/>
        <files mask="arm_svm_polynomial_init_f32.c"/>
        <files mask="arm_svm_polynomial_predict_f32.c"/>
        <files mask="arm_svm_rbf_init_f32.c"/>
        <files mask="arm_svm_rbf_predict_f32.c"/>
        <files mask="arm_svm_sigmoid_init_f32.c"/>
        <files mask="arm_svm_sigmoid_predict_f32.c"/>
        <files mask="arm_svm_linear_init_f16.c"/>
        <files mask="arm_svm_linear_predict_f16.c"/>
        <files mask="arm_svm_polynomial_init_f16.c"/>
        <files mask="arm_svm_polynomial_predict_f16.c"/>
        <files mask="arm_svm_rbf_init_f16.c"/>
        <files mask="arm_svm_rbf_predict_f16.c"/>
        <files mask="arm_svm_sigmoid_init_f16.c"/>
        <files mask="arm_svm_sigmoid_predict_f16.c"/>
      </source>
      <source relative_path="Source/StatisticsFunctions" type="src">
        <files mask="StatisticsFunctions.c"/>
        <files mask="StatisticsFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/StatisticsFunctions" type="src">
        <files mask="arm_absmax_f32.c"/>
        <files mask="arm_absmax_f64.c"/>
        <files mask="arm_absmax_no_idx_f32.c"/>
        <files mask="arm_absmax_no_idx_f64.c"/>
        <files mask="arm_absmax_no_idx_q15.c"/>
        <files mask="arm_absmax_no_idx_q31.c"/>
        <files mask="arm_absmax_no_idx_q7.c"/>
        <files mask="arm_absmax_q15.c"/>
        <files mask="arm_absmax_q31.c"/>
        <files mask="arm_absmax_q7.c"/>
        <files mask="arm_absmin_f32.c"/>
        <files mask="arm_absmin_f64.c"/>
        <files mask="arm_absmin_no_idx_f32.c"/>
        <files mask="arm_absmin_no_idx_f64.c"/>
        <files mask="arm_absmin_no_idx_q15.c"/>
        <files mask="arm_absmin_no_idx_q31.c"/>
        <files mask="arm_absmin_no_idx_q7.c"/>
        <files mask="arm_absmin_q15.c"/>
        <files mask="arm_absmin_q31.c"/>
        <files mask="arm_absmin_q7.c"/>
        <files mask="arm_accumulate_f32.c"/>
        <files mask="arm_accumulate_f64.c"/>
        <files mask="arm_entropy_f32.c"/>
        <files mask="arm_entropy_f64.c"/>
        <files mask="arm_kullback_leibler_f32.c"/>
        <files mask="arm_kullback_leibler_f64.c"/>
        <files mask="arm_logsumexp_dot_prod_f32.c"/>
        <files mask="arm_logsumexp_f32.c"/>
        <files mask="arm_max_f32.c"/>
        <files mask="arm_max_f64.c"/>
        <files mask="arm_max_no_idx_f32.c"/>
        <files mask="arm_max_no_idx_f64.c"/>
        <files mask="arm_max_no_idx_q15.c"/>
        <files mask="arm_max_no_idx_q31.c"/>
        <files mask="arm_max_no_idx_q7.c"/>
        <files mask="arm_max_q15.c"/>
        <files mask="arm_max_q31.c"/>
        <files mask="arm_max_q7.c"/>
        <files mask="arm_mean_f32.c"/>
        <files mask="arm_mean_f64.c"/>
        <files mask="arm_mean_q15.c"/>
        <files mask="arm_mean_q31.c"/>
        <files mask="arm_mean_q7.c"/>
        <files mask="arm_min_f32.c"/>
        <files mask="arm_min_f64.c"/>
        <files mask="arm_min_no_idx_f32.c"/>
        <files mask="arm_min_no_idx_f64.c"/>
        <files mask="arm_min_no_idx_q15.c"/>
        <files mask="arm_min_no_idx_q31.c"/>
        <files mask="arm_min_no_idx_q7.c"/>
        <files mask="arm_min_q15.c"/>
        <files mask="arm_min_q31.c"/>
        <files mask="arm_min_q7.c"/>
        <files mask="arm_mse_f32.c"/>
        <files mask="arm_mse_f64.c"/>
        <files mask="arm_mse_q15.c"/>
        <files mask="arm_mse_q31.c"/>
        <files mask="arm_mse_q7.c"/>
        <files mask="arm_power_f32.c"/>
        <files mask="arm_power_f64.c"/>
        <files mask="arm_power_q15.c"/>
        <files mask="arm_power_q31.c"/>
        <files mask="arm_power_q7.c"/>
        <files mask="arm_rms_f32.c"/>
        <files mask="arm_rms_q15.c"/>
        <files mask="arm_rms_q31.c"/>
        <files mask="arm_std_f32.c"/>
        <files mask="arm_std_f64.c"/>
        <files mask="arm_std_q15.c"/>
        <files mask="arm_std_q31.c"/>
        <files mask="arm_var_f32.c"/>
        <files mask="arm_var_f64.c"/>
        <files mask="arm_var_q15.c"/>
        <files mask="arm_var_q31.c"/>
        <files mask="arm_absmax_f16.c"/>
        <files mask="arm_absmax_no_idx_f16.c"/>
        <files mask="arm_absmin_f16.c"/>
        <files mask="arm_absmin_no_idx_f16.c"/>
        <files mask="arm_accumulate_f16.c"/>
        <files mask="arm_entropy_f16.c"/>
        <files mask="arm_kullback_leibler_f16.c"/>
        <files mask="arm_logsumexp_dot_prod_f16.c"/>
        <files mask="arm_logsumexp_f16.c"/>
        <files mask="arm_max_f16.c"/>
        <files mask="arm_max_no_idx_f16.c"/>
        <files mask="arm_mean_f16.c"/>
        <files mask="arm_min_f16.c"/>
        <files mask="arm_min_no_idx_f16.c"/>
        <files mask="arm_mse_f16.c"/>
        <files mask="arm_power_f16.c"/>
        <files mask="arm_rms_f16.c"/>
        <files mask="arm_std_f16.c"/>
        <files mask="arm_var_f16.c"/>
      </source>
      <source relative_path="Source/SupportFunctions" type="src">
        <files mask="SupportFunctions.c"/>
        <files mask="SupportFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/SupportFunctions" type="src">
        <files mask="arm_barycenter_f32.c"/>
        <files mask="arm_bitonic_sort_f32.c"/>
        <files mask="arm_bubble_sort_f32.c"/>
        <files mask="arm_copy_f32.c"/>
        <files mask="arm_copy_f64.c"/>
        <files mask="arm_copy_q15.c"/>
        <files mask="arm_copy_q31.c"/>
        <files mask="arm_copy_q7.c"/>
        <files mask="arm_f64_to_float.c"/>
        <files mask="arm_f64_to_q31.c"/>
        <files mask="arm_f64_to_q15.c"/>
        <files mask="arm_f64_to_q7.c"/>
        <files mask="arm_fill_f32.c"/>
        <files mask="arm_fill_f64.c"/>
        <files mask="arm_fill_q15.c"/>
        <files mask="arm_fill_q31.c"/>
        <files mask="arm_fill_q7.c"/>
        <files mask="arm_float_to_f64.c"/>
        <files mask="arm_float_to_q15.c"/>
        <files mask="arm_float_to_q31.c"/>
        <files mask="arm_float_to_q7.c"/>
        <files mask="arm_heap_sort_f32.c"/>
        <files mask="arm_insertion_sort_f32.c"/>
        <files mask="arm_merge_sort_f32.c"/>
        <files mask="arm_merge_sort_init_f32.c"/>
        <files mask="arm_q15_to_f64.c"/>
        <files mask="arm_q15_to_float.c"/>
        <files mask="arm_q15_to_q31.c"/>
        <files mask="arm_q15_to_q7.c"/>
        <files mask="arm_q31_to_f64.c"/>
        <files mask="arm_q31_to_float.c"/>
        <files mask="arm_q31_to_q15.c"/>
        <files mask="arm_q31_to_q7.c"/>
        <files mask="arm_q7_to_f64.c"/>
        <files mask="arm_q7_to_float.c"/>
        <files mask="arm_q7_to_q15.c"/>
        <files mask="arm_q7_to_q31.c"/>
        <files mask="arm_quick_sort_f32.c"/>
        <files mask="arm_selection_sort_f32.c"/>
        <files mask="arm_sort_f32.c"/>
        <files mask="arm_sort_init_f32.c"/>
        <files mask="arm_weighted_average_f32.c"/>
        <files mask="arm_barycenter_f16.c"/>
        <files mask="arm_copy_f16.c"/>
        <files mask="arm_f16_to_float.c"/>
        <files mask="arm_f16_to_q15.c"/>
        <files mask="arm_f16_to_f64.c"/>
        <files mask="arm_f64_to_f16.c"/>
        <files mask="arm_fill_f16.c"/>
        <files mask="arm_float_to_f16.c"/>
        <files mask="arm_q15_to_f16.c"/>
        <files mask="arm_weighted_average_f16.c"/>
      </source>
      <source relative_path="Source/TransformFunctions" type="src">
        <files mask="TransformFunctions.c"/>
        <files mask="TransformFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/TransformFunctions" type="src">
        <files mask="arm_bitreversal.c"/>
        <files mask="arm_bitreversal2.c"/>
        <files mask="arm_cfft_f32.c"/>
        <files mask="arm_cfft_f64.c"/>
        <files mask="arm_cfft_init_f32.c"/>
        <files mask="arm_cfft_init_f64.c"/>
        <files mask="arm_cfft_init_q15.c"/>
        <files mask="arm_cfft_init_q31.c"/>
        <files mask="arm_cfft_q15.c"/>
        <files mask="arm_cfft_q31.c"/>
        <files mask="arm_cfft_radix2_f32.c"/>
        <files mask="arm_cfft_radix2_init_f32.c"/>
        <files mask="arm_cfft_radix2_init_q15.c"/>
        <files mask="arm_cfft_radix2_init_q31.c"/>
        <files mask="arm_cfft_radix2_q15.c"/>
        <files mask="arm_cfft_radix2_q31.c"/>
        <files mask="arm_cfft_radix4_f32.c"/>
        <files mask="arm_cfft_radix4_init_f32.c"/>
        <files mask="arm_cfft_radix4_init_q15.c"/>
        <files mask="arm_cfft_radix4_init_q31.c"/>
        <files mask="arm_cfft_radix4_q15.c"/>
        <files mask="arm_cfft_radix4_q31.c"/>
        <files mask="arm_cfft_radix8_f32.c"/>
        <files mask="arm_dct4_f32.c"/>
        <files mask="arm_dct4_init_f32.c"/>
        <files mask="arm_dct4_init_q15.c"/>
        <files mask="arm_dct4_init_q31.c"/>
        <files mask="arm_dct4_q15.c"/>
        <files mask="arm_dct4_q31.c"/>
        <files mask="arm_mfcc_f32.c"/>
        <files mask="arm_mfcc_init_f32.c"/>
        <files mask="arm_mfcc_init_q15.c"/>
        <files mask="arm_mfcc_init_q31.c"/>
        <files mask="arm_mfcc_q15.c"/>
        <files mask="arm_mfcc_q31.c"/>
        <files mask="arm_rfft_f32.c"/>
        <files mask="arm_rfft_fast_f32.c"/>
        <files mask="arm_rfft_fast_f64.c"/>
        <files mask="arm_rfft_fast_init_f32.c"/>
        <files mask="arm_rfft_fast_init_f64.c"/>
        <files mask="arm_rfft_init_f32.c"/>
        <files mask="arm_rfft_init_q15.c"/>
        <files mask="arm_rfft_init_q31.c"/>
        <files mask="arm_rfft_q15.c"/>
        <files mask="arm_rfft_q31.c"/>
        <files mask="arm_bitreversal_f16.c"/>
        <files mask="arm_cfft_f16.c"/>
        <files mask="arm_cfft_init_f16.c"/>
        <files mask="arm_cfft_radix2_f16.c"/>
        <files mask="arm_cfft_radix2_init_f16.c"/>
        <files mask="arm_cfft_radix4_f16.c"/>
        <files mask="arm_cfft_radix8_f16.c"/>
        <files mask="arm_mfcc_f16.c"/>
        <files mask="arm_cfft_radix4_init_f16.c"/>
        <files mask="arm_mfcc_init_f16.c"/>
        <files mask="arm_rfft_fast_f16.c"/>
        <files mask="arm_rfft_fast_init_f16.c"/>
      </source>
      <source relative_path="Source/WindowFunctions" type="src">
        <files mask="WindowFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/WindowFunctions" type="src">
        <files mask="arm_bartlett_f32.c"/>
        <files mask="arm_bartlett_f64.c"/>
        <files mask="arm_blackman_harris_92db_f32.c"/>
        <files mask="arm_blackman_harris_92db_f64.c"/>
        <files mask="arm_hamming_f32.c"/>
        <files mask="arm_hamming_f64.c"/>
        <files mask="arm_hanning_f32.c"/>
        <files mask="arm_hanning_f64.c"/>
        <files mask="arm_hft116d_f32.c"/>
        <files mask="arm_hft116d_f64.c"/>
        <files mask="arm_hft144d_f32.c"/>
        <files mask="arm_hft144d_f64.c"/>
        <files mask="arm_hft169d_f32.c"/>
        <files mask="arm_hft169d_f64.c"/>
        <files mask="arm_hft196d_f32.c"/>
        <files mask="arm_hft196d_f64.c"/>
        <files mask="arm_hft223d_f32.c"/>
        <files mask="arm_hft223d_f64.c"/>
        <files mask="arm_hft248d_f32.c"/>
        <files mask="arm_hft248d_f64.c"/>
        <files mask="arm_hft90d_f32.c"/>
        <files mask="arm_hft90d_f64.c"/>
        <files mask="arm_hft95_f32.c"/>
        <files mask="arm_hft95_f64.c"/>
        <files mask="arm_nuttall3a_f32.c"/>
        <files mask="arm_nuttall3a_f64.c"/>
        <files mask="arm_nuttall3b_f32.c"/>
        <files mask="arm_nuttall3b_f64.c"/>
        <files mask="arm_nuttall3_f32.c"/>
        <files mask="arm_nuttall3_f64.c"/>
        <files mask="arm_nuttall4a_f32.c"/>
        <files mask="arm_nuttall4a_f64.c"/>
        <files mask="arm_nuttall4b_f32.c"/>
        <files mask="arm_nuttall4b_f64.c"/>
        <files mask="arm_nuttall4c_f32.c"/>
        <files mask="arm_nuttall4c_f64.c"/>
        <files mask="arm_nuttall4_f32.c"/>
        <files mask="arm_nuttall4_f64.c"/>
        <files mask="arm_welch_f32.c"/>
        <files mask="arm_welch_f64.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_DSP_Source.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="PrivateInclude" type="c_include"/>
        <include_path relative_path="Source/DistanceFunctions" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
        <include_path relative_path="PrivateInclude" type="asm_include"/>
        <include_path relative_path="Source/DistanceFunctions" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_OSTick.MIMX8ML8" name="CMSIS_Device_API_OSTick" brief="Device interrupt controller interface" version="1.0.2" full_name="CMSIS Device API OSTick" category="Device/OS Tick" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="os_tick.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Device_API_OSTick.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_RTOS2.MIMX8ML8" name="CMSIS_Device_API_RTOS2" brief="CMSIS-RTOS API for Cortex-M, SC000, and SC300" version="2.3.0" full_name="CMSIS Device API RTOS2" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="cmsis_os2.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Device_API_RTOS2.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.CAN.MIMX8ML8" name="CMSIS_Driver_CAN" brief="Access to #include Driver_CAN.h file for custom implementation" version="1.3.0" full_name="CMSIS Driver CAN" category="CMSIS Driver/CAN" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_CAN.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_CAN.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet.MIMX8ML8" name="CMSIS_Driver_Ethernet_Common" brief="Access to #include Driver_ETH.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet Common" category="CMSIS Driver/Ethernet" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Common.h"/>
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_ETH_MAC.h"/>
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_MAC.MIMX8ML8" name="CMSIS_Driver_Ethernet_MAC" brief="Access to #include Driver_ETH_MAC.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet MAC" category="CMSIS Driver/Ethernet MAC" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_Common.h"/>
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet_MAC.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_PHY.MIMX8ML8" name="CMSIS_Driver_Ethernet_PHY" brief="Access to #include Driver_ETH_PHY.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet PHY" category="CMSIS Driver/Ethernet PHY" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_ETH_PHY.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet_PHY.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Flash.MIMX8ML8" name="CMSIS_Driver_Flash" brief="Access to #include Driver_Flash.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver Flash" category="CMSIS Driver/Flash" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Flash.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Flash.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.GPIO.MIMX8ML8" name="CMSIS_Driver_GPIO" brief="Access to #include Driver_GPIO.h file for custom implementation" version="1.0.0" full_name="CMSIS Driver GPIO" category="CMSIS Driver/GPIO" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include/GPIO" template="true" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="Include/GPIO" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_GPIO.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include/GPIO" type="c_include"/>
        <include_path relative_path="Include/GPIO" type="asm_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.I2C.MIMX8ML8" name="CMSIS_Driver_I2C" brief="Access to #include Driver_I2C.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver I2C" category="CMSIS Driver/I2C" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_I2C.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_I2C.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.MCI.MIMX8ML8" name="CMSIS_Driver_MCI" brief="Access to #include Driver_MCI.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver MCI" category="CMSIS Driver/MCI" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_MCI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_MCI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.NAND.MIMX8ML8" name="CMSIS_Driver_NAND" brief="Access to #include Driver_NAND.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver NAND" category="CMSIS Driver/NAND" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_NAND.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_NAND.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SAI.MIMX8ML8" name="CMSIS_Driver_SAI" brief="Access to #include Driver_SAI.h file for custom implementation" version="1.2.0" full_name="CMSIS Driver SAI" category="CMSIS Driver/SAI" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_SAI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_SAI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SPI.MIMX8ML8" name="CMSIS_Driver_SPI" brief="Access to #include Driver_SPI.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver SPI" category="CMSIS Driver/SPI" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_SPI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_SPI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USART.MIMX8ML8" name="CMSIS_Driver_USART" brief="Access to #include Driver_USART.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver USART" category="CMSIS Driver/USART" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USART.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USART.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Device.MIMX8ML8" name="CMSIS_Driver_USB_Device" brief="Access to #include Driver_USBD.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USB Device" category="CMSIS Driver/USB Device" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USBD.h"/>
        <files mask="Driver_USB.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USB_Device.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Host.MIMX8ML8" name="CMSIS_Driver_USB_Host" brief="Access to #include Driver_USBH.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USB Host" category="CMSIS Driver/USB Host" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USBH.h"/>
        <files mask="Driver_USB.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USB_Host.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.WiFi.MIMX8ML8" name="CMSIS_Driver_WiFi" brief="Access to #include Driver_WiFi.h file" version="1.1.0" full_name="CMSIS Driver WiFi" category="CMSIS Driver/WiFi" user_visible="false" type="CMSIS_driver" package_base_path="CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_WiFi.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_WiFi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_NN_Source.MIMX8ML8" name="CMSIS_NN_Library_Source" brief="CMSIS-NN Library" version="6.0.0" full_name="CMSIS NN Library Source" category="CMSIS/NN" user_visible="true" type="CMSIS_driver" package_base_path="CMSIS/NN" project_base_path="CMSIS/NN">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_nnfunctions.h"/>
        <files mask="arm_nnsupportfunctions.h"/>
        <files mask="arm_nn_math_types.h"/>
        <files mask="arm_nn_tables.h"/>
        <files mask="arm_nn_types.h"/>
      </source>
      <source relative_path="Include/Internal" type="c_include">
        <files mask="arm_nn_compiler.h"/>
      </source>
      <source relative_path="Source/ActivationFunctions" type="src">
        <files mask="arm_nn_activation_s16.c"/>
        <files mask="arm_relu6_s8.c"/>
        <files mask="arm_relu_q15.c"/>
        <files mask="arm_relu_q7.c"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_elementwise_add_s16.c"/>
        <files mask="arm_elementwise_add_s8.c"/>
        <files mask="arm_elementwise_mul_acc_s16.c"/>
        <files mask="arm_elementwise_mul_s16.c"/>
        <files mask="arm_elementwise_mul_s16_s8.c"/>
        <files mask="arm_elementwise_mul_s8.c"/>
        <files mask="arm_elementwise_mul_s16_batch_offset.c"/>
      </source>
      <source relative_path="Source/ConcatenationFunctions" type="src">
        <files mask="arm_concatenation_s8_w.c"/>
        <files mask="arm_concatenation_s8_x.c"/>
        <files mask="arm_concatenation_s8_y.c"/>
        <files mask="arm_concatenation_s8_z.c"/>
      </source>
      <source relative_path="Source/ConvolutionFunctions" type="src">
        <files mask="arm_convolve_1x1_s4.c"/>
        <files mask="arm_convolve_1x1_s4_fast.c"/>
        <files mask="arm_convolve_1x1_s8.c"/>
        <files mask="arm_convolve_1x1_s8_fast.c"/>
        <files mask="arm_convolve_1_x_n_s4.c"/>
        <files mask="arm_convolve_1_x_n_s8.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s16.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s4.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s8.c"/>
        <files mask="arm_convolve_s16.c"/>
        <files mask="arm_convolve_s4.c"/>
        <files mask="arm_convolve_s8.c"/>
        <files mask="arm_convolve_wrapper_s16.c"/>
        <files mask="arm_convolve_wrapper_s4.c"/>
        <files mask="arm_convolve_wrapper_s8.c"/>
        <files mask="arm_depthwise_conv_3x3_s8.c"/>
        <files mask="arm_depthwise_conv_fast_s16.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s16.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s4.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s8.c"/>
        <files mask="arm_depthwise_conv_s16.c"/>
        <files mask="arm_depthwise_conv_s4.c"/>
        <files mask="arm_depthwise_conv_s4_opt.c"/>
        <files mask="arm_depthwise_conv_s8.c"/>
        <files mask="arm_depthwise_conv_s8_opt.c"/>
        <files mask="arm_depthwise_conv_wrapper_s16.c"/>
        <files mask="arm_depthwise_conv_wrapper_s4.c"/>
        <files mask="arm_depthwise_conv_wrapper_s8.c"/>
        <files mask="arm_nn_depthwise_conv_s8_core.c"/>
        <files mask="arm_nn_mat_mult_kernel_row_offset_s8_s16.c"/>
        <files mask="arm_nn_mat_mult_kernel_s4_s16.c"/>
        <files mask="arm_nn_mat_mult_kernel_s8_s16.c"/>
        <files mask="arm_nn_mat_mult_kernel_s16.c"/>
        <files mask="arm_nn_mat_mult_s8.c"/>
        <files mask="arm_transpose_conv_get_buffer_sizes_s8.c"/>
        <files mask="arm_transpose_conv_s8.c"/>
      </source>
      <source relative_path="Source/FullyConnectedFunctions" type="src">
        <files mask="arm_fully_connected_get_buffer_sizes_s16.c"/>
        <files mask="arm_fully_connected_get_buffer_sizes_s8.c"/>
        <files mask="arm_fully_connected_s16.c"/>
        <files mask="arm_fully_connected_s4.c"/>
        <files mask="arm_fully_connected_s8.c"/>
        <files mask="arm_vector_sum_s8.c"/>
        <files mask="arm_vector_sum_s8_s64.c"/>
      </source>
      <source relative_path="Source/LSTMFunctions" type="src">
        <files mask="arm_lstm_unidirectional_s16.c"/>
        <files mask="arm_lstm_unidirectional_s8.c"/>
      </source>
      <source relative_path="Source/NNSupportFunctions" type="src">
        <files mask="arm_nntables.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_padded_s8.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s16.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s4.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s8.c"/>
        <files mask="arm_nn_lstm_calculate_gate_s16.c"/>
        <files mask="arm_nn_lstm_calculate_gate_s8_s16.c"/>
        <files mask="arm_nn_lstm_step_s16.c"/>
        <files mask="arm_nn_lstm_step_s8.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s16.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s4.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s8.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s8_s32.c"/>
        <files mask="arm_nn_mat_mul_core_1x_s4.c"/>
        <files mask="arm_nn_mat_mul_core_1x_s8.c"/>
        <files mask="arm_nn_mat_mul_core_4x_s8.c"/>
        <files mask="arm_nn_vec_mat_mul_result_acc_s16.c"/>
        <files mask="arm_nn_vec_mat_mul_result_acc_s8_s16.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s16.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s4.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s8.c"/>
        <files mask="arm_nn_vec_mat_mult_t_svdf_s8.c"/>
        <files mask="arm_q7_to_q15_with_offset.c"/>
        <files mask="arm_s8_to_s16_unordered_with_offset.c"/>
      </source>
      <source relative_path="Source/PoolingFunctions" type="src">
        <files mask="arm_avgpool_get_buffer_sizes_s16.c"/>
        <files mask="arm_avgpool_get_buffer_sizes_s8.c"/>
        <files mask="arm_avgpool_s16.c"/>
        <files mask="arm_avgpool_s8.c"/>
        <files mask="arm_max_pool_s16.c"/>
        <files mask="arm_max_pool_s8.c"/>
      </source>
      <source relative_path="Source/ReshapeFunctions" type="src">
        <files mask="arm_reshape_s8.c"/>
      </source>
      <source relative_path="Source/SoftmaxFunctions" type="src">
        <files mask="arm_nn_softmax_common_s8.c"/>
        <files mask="arm_softmax_s16.c"/>
        <files mask="arm_softmax_s8.c"/>
        <files mask="arm_softmax_s8_s16.c"/>
        <files mask="arm_softmax_u8.c"/>
      </source>
      <source relative_path="Source/SVDFunctions" type="src">
        <files mask="arm_svdf_get_buffer_sizes_s8.c"/>
        <files mask="arm_svdf_s8.c"/>
        <files mask="arm_svdf_state_s16_s8.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_NN_Source.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="Include" type="asm_include"/>
      </include_paths>
    </component>
    <!--<component id="container.CMSIS_all_files.MIMX8ML8" name="MIMX8ML8" version="1.0.0" package_base_path="CMSIS" project_base_path="./">
  <source relative_path="Driver/Include" type="c_include">
    <files mask="Driver_CAN.h"/>
    <files mask="Driver_Common.h"/>
    <files mask="Driver_ETH.h"/>
    <files mask="Driver_ETH_MAC.h"/>
    <files mask="Driver_ETH_PHY.h"/>
    <files mask="Driver_Flash.h"/>
    <files mask="Driver_I2C.h"/>
    <files mask="Driver_MCI.h"/>
    <files mask="Driver_NAND.h"/>
    <files mask="Driver_SAI.h"/>
    <files mask="Driver_SPI.h"/>
    <files mask="Driver_Storage.h"/>
    <files mask="Driver_USART.h"/>
    <files mask="Driver_USB.h"/>
    <files mask="Driver_USBD.h"/>
    <files mask="Driver_USBH.h"/>
    <files mask="Driver_WiFi.h"/>
  </source>
  <source relative_path="Driver/Include/GPIO" type="c_include">
    <files mask="Driver_GPIO.h"/>
  </source>
  <source relative_path="Driver/VIO/Include" type="c_include">
    <files mask="cmsis_vio.h"/>
  </source>
  <source relative_path="Driver/VIO/Source" type="src">
    <files mask="vio.c"/>
    <files mask="vio_memory.c"/>
  </source>
  <source relative_path="Driver/VIO" type="other">
    <files mask="cmsis_vio.scvd"/>
  </source>
  <source relative_path="Core/Include" type="c_include">
    <files mask="cmsis_clang.h"/>
  </source>
  <source relative_path="Core/Include/m-profile" type="c_include">
    <files mask="cmsis_clang_m.h"/>
  </source>
</component>-->
    <component id="platform.utilities.misc_utilities.MIMX8ML8" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.1.1" full_name="Utilities miscellaneous" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="devices/MIMX8ML8/utilities" project_base_path="utilities">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_syscall_stub.c"/>
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="asm_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="fsl_memcpy.S"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utilities_misc_utilities.MIMX8ML8.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.incbin.MIMX8ML8" name="incbin" brief="Used to include slave core binary into master core binary." version="1.0.0" full_name="utility incbin" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="devices/MIMX8ML8/utilities/incbin" project_base_path="utilities">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="asm_include">
        <files mask="fsl_incbin.S"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_incbin.MIMX8ML8.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.cmsis_drivers.MIMX8ML8" name="CMSIS driver" brief="CMSIS driver" version="2.0.0" full_name="CMSIS driver" category="Board Support/SDK Project Template" user_visible="true" type="CMSIS_driver" package_base_path="components/cmsis_drivers" project_base_path="CMSIS_drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
    </component>
    <component id="platform.drivers.common.MIMX8ML8" name="common" brief="common Driver" version="2.6.0" full_name="common Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source relative_path="./" type="src" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="fsl_common_arm.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="fsl_common_arm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_common.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.voice_spot.MIMX8ML8" name="voice_spot" brief="Voice spot" version="0.24.1" full_name="middleware voice_spot" category="Voice/VoiceSpot library" user_visible="true" type="middleware" package_base_path="middleware/audio_voice/components/voice_spot" project_base_path="voice_spot">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
    </component>
    <component id="middleware.tinycbor.MIMX8ML8" name="tinycbor" brief="Concise Binary Object Representation (CBOR) Library" version="0.6.0" full_name="TinyCBOR" category="TinyCBOR/TinyCBOR" user_visible="true" type="middleware" package_base_path="middleware/tinycbor" project_base_path="tinycbor">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="src" type="c_include">
        <files mask="cbor.h"/>
        <files mask="cborinternal_p.h"/>
        <files mask="compilersupport_p.h"/>
        <files mask="tinycbor-version.h"/>
        <files mask="utf8_p.h"/>
      </source>
      <source relative_path="src" type="src">
        <files mask="cborencoder.c"/>
        <files mask="cborencoder_close_container_checked.c"/>
        <files mask="cborerrorstrings.c"/>
        <files mask="cborparser.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_tinycbor.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="src" type="c_include"/>
        <include_path relative_path="src" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.pkcs11.MIMX8ML8" name="pkcs11" brief="Public Key Cryptography Standard #11 defines generic cryptographic token interface." version="2.40.1" full_name="pkcs11" category="AWS IoT/OASIS PKCS Standard 11" user_visible="true" type="middleware" package_base_path="middleware/pkcs11" project_base_path="pkcs11">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="README.md"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="pkcs11t.h"/>
        <files mask="pkcs11f.h"/>
        <files mask="pkcs11.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_pkcs11.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg-lite.imx952_m7.MIMX8ML8" name="rpmsg_lite_imx952_m7" brief="RPMsg-Lite for i.MX952 application" version="5.1.4" full_name="Remote Procedure Messaging Lite porting layer for i.MX952 board" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
    </component>
    <component id="middleware.multicore.remoteproc.MIMX8ML8" name="remoteproc" brief="Remote Processor component" version="1.0.0" full_name="Remote Processor component" category="Multicore/Core Management" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="remoteproc">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="remoteproc" type="c_include">
        <files mask="remoteproc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_remoteproc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="remoteproc" type="c_include"/>
        <include_path relative_path="remoteproc" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.remoteproc.empty_rsc_table.MIMX8ML8" name="remoteproc_empty_rsc_table" brief="Empty resource table of Remote Processor Framework" version="1.0.0" full_name="Empty resource table of Remote Processor Framework" category="Multicore/Core Management" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="remoteproc">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="remoteproc" type="src">
        <files mask="empty_rsc_table.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_remoteproc_empty_rsc_table.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.remoteproc.loadscript.MIMX8ML8" name="remoteproc_load_script" brief="remoteproc-load script" version="1.0.0" full_name="remoteproc-load script" category="Multicore/Linux remoteproc" user_visible="true" type="other" package_base_path="middleware/multicore" project_base_path="multicore">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="tools/remoteproc-load" type="doc">
        <files mask="Readme.md"/>
      </source>
      <source relative_path="tools/remoteproc-load" type="script">
        <files mask="load.sh"/>
      </source>
      <source relative_path="tools/remoteproc-load" type="other">
        <files mask="remote.cfg"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_remoteproc_loadscript.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.mcmgr.MIMX8ML8" name="mcmgr" brief="MCMgr" version="4.1.7" full_name="Multicore Manager" category="Multicore/Core Management" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="mcmgr">
      <defines>
        <define name="MULTICORE_APP" value="1"/>
      </defines>
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="mcmgr/inc" type="c_include">
        <files mask="mcmgr.h"/>
        <files mask="mcmgr_internal_core_api.h"/>
      </source>
      <source relative_path="mcmgr/src" type="src">
        <files mask="mcmgr.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_mcmgr.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="mcmgr/inc" type="c_include"/>
        <include_path relative_path="mcmgr/inc" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.doc.MIMX8ML8" name="eRPC" brief="eRPC" version="1.14.0" full_name="Embedded Remote Procedure Call" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="erpc" project_relative_path="erpc_aux" type="other">
        <files mask="Makefile" hidden="true"/>
        <files mask="LICENSE" hidden="true"/>
        <files mask="SBOM.spdx.json" hidden="true"/>
      </source>
      <source relative_path="erpc" project_relative_path="erpc_aux" type="doc">
        <files mask="README.md" hidden="true"/>
        <files mask="SCR.txt" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_c" project_relative_path="erpc_aux" type="other">
        <files mask="Makefile" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_c" project_relative_path="doc" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_c/config" project_relative_path="erpc_aux" config="true" type="c_include">
        <files mask="erpc_config.h" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_c/port" project_relative_path="erpc_aux" type="c_include">
        <files mask="erpc_threading.h" hidden="true"/>
        <files mask="erpc_serial.h" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_c/port" project_relative_path="erpc_aux" type="src">
        <files mask="erpc_threading_pthreads.cpp" hidden="true"/>
        <files mask="erpc_serial.cpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" project_relative_path="erpc_aux" type="src">
        <files mask="erpc_setup_mbf_static.cpp" hidden="true"/>
        <files mask="erpc_setup_serial.cpp" hidden="true"/>
        <files mask="erpc_setup_uart_zephyr.cpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" project_relative_path="erpc_aux" type="src">
        <files mask="erpc_inter_thread_buffer_transport.cpp" hidden="true"/>
        <files mask="erpc_serial_transport.cpp" hidden="true"/>
        <files mask="erpc_tcp_transport.cpp" hidden="true"/>
        <files mask="erpc_uart_zephyr_transport.cpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" project_relative_path="erpc_aux" type="cpp_include">
        <files mask="erpc_inter_thread_buffer_transport.hpp" hidden="true"/>
        <files mask="erpc_serial_transport.hpp" hidden="true"/>
        <files mask="erpc_tcp_transport.hpp" hidden="true"/>
        <files mask="erpc_uart_zephyr_transport.hpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_python" project_relative_path="erpc_aux" type="script">
        <files mask="setup.py" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_python" project_relative_path="erpc_aux" type="doc">
        <files mask="README_Pypi.md" hidden="true"/>
      </source>
      <source relative_path="erpc/erpc_python/erpc" project_relative_path="erpc_aux" type="script">
        <files mask="__init__.py" hidden="true"/>
        <files mask="arbitrator.py" hidden="true"/>
        <files mask="basic_codec.py" hidden="true"/>
        <files mask="client.py" hidden="true"/>
        <files mask="codec.py" hidden="true"/>
        <files mask="crc16.py" hidden="true"/>
        <files mask="erpc_version.py" hidden="true"/>
        <files mask="server.py" hidden="true"/>
        <files mask="simple_server.py" hidden="true"/>
        <files mask="transport.py" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen" project_relative_path="erpc_aux" type="other">
        <files mask="Makefile" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen" project_relative_path="erpc_aux" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/bin" project_relative_path="erpc_aux" type="script">
        <files mask="txt_to_c.py" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/embedded-rpc.xcodeproj" project_relative_path="erpc_aux" type="other">
        <files mask="project.pbxproj" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/embedded-rpc.xcodeproj/project.xcworkspace" project_relative_path="erpc_aux" type="other">
        <files mask="contents.xcworkspacedata" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src" project_relative_path="erpc_aux" type="c_include">
        <files mask="annotations.h" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src" project_relative_path="erpc_aux" type="cpp_include">
        <files mask="AstNode.hpp" hidden="true"/>
        <files mask="AstWalker.hpp" hidden="true"/>
        <files mask="CGenerator.hpp" hidden="true"/>
        <files mask="ErpcLexer.hpp" hidden="true"/>
        <files mask="Generator.hpp" hidden="true"/>
        <files mask="HexValues.hpp" hidden="true"/>
        <files mask="InterfaceDefinition.hpp" hidden="true"/>
        <files mask="JavaGenerator.hpp" hidden="true"/>
        <files mask="Logging.hpp" hidden="true"/>
        <files mask="ParseErrors.hpp" hidden="true"/>
        <files mask="PythonGenerator.hpp" hidden="true"/>
        <files mask="SearchPath.hpp" hidden="true"/>
        <files mask="SymbolScanner.hpp" hidden="true"/>
        <files mask="Token.hpp" hidden="true"/>
        <files mask="UniqueIdChecker.hpp" hidden="true"/>
        <files mask="Utils.hpp" hidden="true"/>
        <files mask="Value.hpp" hidden="true"/>
        <files mask="format_string.hpp" hidden="true"/>
        <files mask="options.hpp" hidden="true"/>
        <files mask="os_config.hpp" hidden="true"/>
        <files mask="smart_ptr.hpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src" project_relative_path="erpc_aux" type="src">
        <files mask="AstNode.cpp" hidden="true"/>
        <files mask="AstWalker.cpp" hidden="true"/>
        <files mask="CGenerator.cpp" hidden="true"/>
        <files mask="ErpcLexer.cpp" hidden="true"/>
        <files mask="Generator.cpp" hidden="true"/>
        <files mask="HexValues.cpp" hidden="true"/>
        <files mask="InterfaceDefinition.cpp" hidden="true"/>
        <files mask="JavaGenerator.cpp" hidden="true"/>
        <files mask="Logging.cpp" hidden="true"/>
        <files mask="ParseErrors.cpp" hidden="true"/>
        <files mask="PythonGenerator.cpp" hidden="true"/>
        <files mask="SearchPath.cpp" hidden="true"/>
        <files mask="SymbolScanner.cpp" hidden="true"/>
        <files mask="Token.cpp" hidden="true"/>
        <files mask="UniqueIdChecker.cpp" hidden="true"/>
        <files mask="Utils.cpp" hidden="true"/>
        <files mask="erpcgen.cpp" hidden="true"/>
        <files mask="format_string.cpp" hidden="true"/>
        <files mask="options.cpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src" project_relative_path="erpc_aux" type="other">
        <files mask="erpcgen_lexer.l" hidden="true"/>
        <files mask="erpcgen_parser.y" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src/cpptemplate" project_relative_path="erpc_aux" type="cpp_include">
        <files mask="cpptempl.hpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src/cpptemplate" project_relative_path="erpc_aux" type="src">
        <files mask="cpptempl.cpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src/cpptemplate" project_relative_path="erpc_aux" type="other">
        <files mask="README.rst" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src/cpptemplate" project_relative_path="erpc_aux" type="doc">
        <files mask="LICENSE.txt" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src/templates" project_relative_path="erpc_aux" type="other">
        <files mask="c_client_header.template" hidden="true"/>
        <files mask="c_client_source.template" hidden="true"/>
        <files mask="c_common_header.template" hidden="true"/>
        <files mask="c_crc.template" hidden="true"/>
        <files mask="c_server_header.template" hidden="true"/>
        <files mask="c_server_source.template" hidden="true"/>
        <files mask="cpp_client_header.template" hidden="true"/>
        <files mask="cpp_client_source.template" hidden="true"/>
        <files mask="cpp_coders.template" hidden="true"/>
        <files mask="cpp_common_functions.template" hidden="true"/>
        <files mask="cpp_interface_header.template" hidden="true"/>
        <files mask="cpp_interface_source.template" hidden="true"/>
        <files mask="cpp_server_header.template" hidden="true"/>
        <files mask="cpp_server_source.template" hidden="true"/>
        <files mask="java_client.template" hidden="true"/>
        <files mask="java_coders.template" hidden="true"/>
        <files mask="java_const.template" hidden="true"/>
        <files mask="java_enum.template" hidden="true"/>
        <files mask="java_interface.template" hidden="true"/>
        <files mask="java_server.template" hidden="true"/>
        <files mask="java_struct.template" hidden="true"/>
        <files mask="py_client.template" hidden="true"/>
        <files mask="py_coders.template" hidden="true"/>
        <files mask="py_common.template" hidden="true"/>
        <files mask="py_global_init.template" hidden="true"/>
        <files mask="py_init.template" hidden="true"/>
        <files mask="py_interface.template" hidden="true"/>
        <files mask="py_server.template" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src/types" project_relative_path="erpc_aux" type="cpp_include">
        <files mask="AliasType.hpp" hidden="true"/>
        <files mask="Annotation.hpp" hidden="true"/>
        <files mask="ArrayType.hpp" hidden="true"/>
        <files mask="BuiltinType.hpp" hidden="true"/>
        <files mask="ConstType.hpp" hidden="true"/>
        <files mask="DataType.hpp" hidden="true"/>
        <files mask="EnumMember.hpp" hidden="true"/>
        <files mask="EnumType.hpp" hidden="true"/>
        <files mask="Function.hpp" hidden="true"/>
        <files mask="FunctionType.hpp" hidden="true"/>
        <files mask="Group.hpp" hidden="true"/>
        <files mask="Interface.hpp" hidden="true"/>
        <files mask="ListType.hpp" hidden="true"/>
        <files mask="Program.hpp" hidden="true"/>
        <files mask="StructMember.hpp" hidden="true"/>
        <files mask="StructType.hpp" hidden="true"/>
        <files mask="Symbol.hpp" hidden="true"/>
        <files mask="SymbolScope.hpp" hidden="true"/>
        <files mask="UnionCase.hpp" hidden="true"/>
        <files mask="UnionType.hpp" hidden="true"/>
        <files mask="VoidType.hpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/src/types" project_relative_path="erpc_aux" type="src">
        <files mask="Type.cpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/VisualStudio_v14" project_relative_path="erpc_aux" type="other">
        <files mask="erpcgen.sln" hidden="true"/>
        <files mask="erpcgen.vcxproj" hidden="true"/>
        <files mask="erpcgen.vcxproj.filters" hidden="true"/>
        <files mask="erpcgen.vcxproj.user" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/VisualStudio_v14" project_relative_path="erpc_aux" type="doc">
        <files mask="readme_erpcgen.txt" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/VisualStudio_v14" project_relative_path="erpc_aux" type="src">
        <files mask="stdafx.cpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcgen/VisualStudio_v14" project_relative_path="erpc_aux" type="c_include">
        <files mask="stdafx.h" hidden="true"/>
        <files mask="stdbool.h" hidden="true"/>
        <files mask="targetver.h" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcsniffer" project_relative_path="erpc_aux" type="other">
        <files mask="Makefile" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcsniffer" project_relative_path="erpc_aux" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcsniffer/src" project_relative_path="erpc_aux" type="c_include">
        <files mask="erpc_config.h" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcsniffer/src" project_relative_path="erpc_aux" type="cpp_include">
        <files mask="Sniffer.hpp" hidden="true"/>
      </source>
      <source relative_path="erpc/erpcsniffer/src" project_relative_path="erpc_aux" type="src">
        <files mask="Sniffer.cpp" hidden="true"/>
        <files mask="erpcsniffer.cpp" hidden="true"/>
      </source>
      <source relative_path="erpc/mk" project_relative_path="erpc_aux" type="script">
        <files mask="common.mk" hidden="true"/>
        <files mask="erpc_common.mk" hidden="true"/>
        <files mask="flags.mk" hidden="true"/>
        <files mask="paths.mk" hidden="true"/>
        <files mask="subdirs.mk" hidden="true"/>
        <files mask="targets.mk" hidden="true"/>
      </source>
      <source relative_path="erpc/utilities" project_relative_path="erpc_aux" type="doc">
        <files mask="README.txt" hidden="true"/>
      </source>
      <source relative_path="erpc/utilities/styles" project_relative_path="erpc_aux" type="doc">
        <files mask="README.txt" hidden="true"/>
      </source>
      <source relative_path="erpc/utilities/styles/NOTEPADpp" project_relative_path="erpc_aux" type="xml">
        <files mask="IDl_deep_black.xml" hidden="true"/>
        <files mask="IDl_default.xml" hidden="true"/>
        <files mask="template_deep_black.xml" hidden="true"/>
        <files mask="template_default.xml" hidden="true"/>
      </source>
      <source relative_path="erpc/utilities/styles/VSC" project_relative_path="erpc_aux" type="doc">
        <files mask="CHANGELOG.md" hidden="true"/>
        <files mask="README.md" hidden="true"/>
        <files mask="vsc-extension-quickstart.md" hidden="true"/>
      </source>
      <source relative_path="erpc/utilities/styles/VSC" project_relative_path="erpc_aux" type="other">
        <files mask="language-configuration.json" hidden="true"/>
        <files mask="package.json" hidden="true"/>
      </source>
      <source relative_path="erpc/utilities/styles/VSC/.vscode" project_relative_path="erpc_aux" type="other">
        <files mask="launch.json" hidden="true"/>
      </source>
      <source relative_path="erpc/utilities/styles/VSC/img" project_relative_path="erpc_aux" type="image">
        <files mask="erpcPic.png" hidden="true"/>
        <files mask="templatePic.png" hidden="true"/>
      </source>
      <source relative_path="erpc/utilities/styles/VSC/syntaxes" project_relative_path="erpc_aux" type="other">
        <files mask="erpc.tmLanguage.json" hidden="true"/>
        <files mask="template.tmLanguage.json" hidden="true"/>
      </source>
      <source relative_path="tools/erpcgen/Linux_x64" project_relative_path="erpc_aux" type="other">
        <files mask="erpcgen" hidden="true"/>
      </source>
      <source relative_path="tools/erpcgen/Linux_x86" project_relative_path="erpc_aux" type="other">
        <files mask="erpcgen" hidden="true"/>
      </source>
      <source relative_path="tools/erpcgen/Mac" project_relative_path="erpc_aux" type="other">
        <files mask="erpcgen" hidden="true"/>
      </source>
      <source relative_path="tools/erpcgen/Windows" project_relative_path="erpc_aux" type="other">
        <files mask="erpcgen.exe" hidden="true"/>
      </source>
      <source relative_path="tools/erpcsniffer/Linux_x64" project_relative_path="erpc_aux" type="other">
        <files mask="erpcsniffer" hidden="true"/>
      </source>
      <source relative_path="tools/erpcsniffer/Linux_x86" project_relative_path="erpc_aux" type="other">
        <files mask="erpcsniffer" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_doc.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.MIMX8ML8" name="multicore middleware" brief="Multicore SDK" version="25.06.00" full_name="Multicore Software Development Kit" category="Multicore/MulticoreSDK" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="multicore">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
    </component>
    <component id="middleware.multicore.multicore.doc.MIMX8ML8" name="multicore" brief="multicore" version="25.06.00" full_name="Multicore" category="Multicore/MulticoreSDK" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="multicore">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" project_relative_path="multicore_aux" type="doc">
        <files mask="README.md" hidden="true"/>
        <files mask="CHANGELOG.md" hidden="true"/>
        <files mask="SCR.txt" hidden="true"/>
      </source>
      <source relative_path="mcuxsdk-doc/MCSDK_GettingStarted/images" project_relative_path="multicore_aux" type="image">
        <files mask="erpc_block_diagram.png" hidden="true"/>
        <files mask="multicore_folder_structure.jpg" hidden="true"/>
      </source>
      <source relative_path="mcuxsdk-doc/MCSDK_GettingStarted/images" project_relative_path="multicore_aux" type="other">
        <files mask="mcsdk_layers.svg" hidden="true"/>
      </source>
      <source relative_path="mcuxsdk-doc/MCSDK_GettingStarted" project_relative_path="multicore_aux" type="doc">
        <files mask="mcsdk_gettingstarted.md" hidden="true"/>
      </source>
      <source relative_path="mcuxsdk-doc/MCSDK_ReleaseNotes" project_relative_path="multicore_aux" type="doc">
        <files mask="mcsdk_releasenotes.md" hidden="true"/>
      </source>
      <source relative_path="mcuxsdk-doc/eRPC_GettingStarted/images" project_relative_path="multicore_aux" type="image">
        <files mask="client-related_generated_files.png" hidden="true"/>
        <files mask="client_application.jpg" hidden="true"/>
        <files mask="client_infrastructure_files.jpg" hidden="true"/>
        <files mask="client_multicore_infrastructure_files.jpg" hidden="true"/>
        <files mask="client_user_code.png" hidden="true"/>
        <files mask="running_the_erpc_application.png" hidden="true"/>
        <files mask="server-related_generated_files.png" hidden="true"/>
        <files mask="server_infrastructure_files.jpg" hidden="true"/>
        <files mask="server_multicore_infrastructure_files.jpg" hidden="true"/>
        <files mask="server_project_basic_source_files.jpg" hidden="true"/>
        <files mask="server_user_code.png" hidden="true"/>
      </source>
      <source relative_path="mcuxsdk-doc/eRPC_GettingStarted/topics" project_relative_path="multicore_aux" type="doc">
        <files mask="client-related_generated_files.md" hidden="true"/>
        <files mask="client_infrastructure_files.md" hidden="true"/>
        <files mask="client_multicore_infrastructure_files.md" hidden="true"/>
        <files mask="client_project_basic_source_files.md" hidden="true"/>
        <files mask="client_user_code.md" hidden="true"/>
        <files mask="client_user_code_001.md" hidden="true"/>
        <files mask="create_an_erpc_application.md" hidden="true"/>
        <files mask="creating_the_idl_file.md" hidden="true"/>
        <files mask="designing_the_erpc_application.md" hidden="true"/>
        <files mask="erpc_example.md" hidden="true"/>
        <files mask="multicore_client_application.md" hidden="true"/>
        <files mask="multicore_server_application.md" hidden="true"/>
        <files mask="multiprocessor_client_application.md" hidden="true"/>
        <files mask="multiprocessor_server_application.md" hidden="true"/>
        <files mask="note_about_the_source_code_in_the_document.md" hidden="true"/>
        <files mask="other_uses_for_an_erpc_implementation.md" hidden="true"/>
        <files mask="overview.md" hidden="true"/>
        <files mask="running_the_erpc_application.md" hidden="true"/>
        <files mask="server_infrastructure_files.md" hidden="true"/>
        <files mask="server_multicore_infrastructure_files.md" hidden="true"/>
        <files mask="server_project_basic_source_files.md" hidden="true"/>
        <files mask="server_related_generated_files.md" hidden="true"/>
        <files mask="server_user_code.md" hidden="true"/>
        <files mask="server_user_code_001.md" hidden="true"/>
        <files mask="using_the_erpc_generator_tool.md" hidden="true"/>
      </source>
      <source relative_path="mcuxsdk-doc/eRPC_GettingStarted" project_relative_path="multicore_aux" type="doc">
        <files mask="ugindex.md" hidden="true"/>
      </source>
      <source relative_path="./" project_relative_path="multicore_aux" type="other">
        <files mask="SBOM.spdx.json" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_multicore_doc.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.silicon_id_imx8.MIMX8ML8" name="silicon_id_imx8" brief="Driver silicon_id imx8" version="2.0.0" full_name="Driver silicon_id_imx8" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id/socs/imx8" project_base_path="component/silicon_id">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id_soc.c"/>
      </source>
      <source relative_path=".." type="c_include">
        <files mask="fsl_silicon_id_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id_imx8.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path=".." type="c_include"/>
        <include_path relative_path=".." type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.silicon_id_imx93.MIMX8ML8" name="silicon_id_imx93" brief="Driver silicon_id imx93" version="2.0.0" full_name="Driver silicon_id_imx93" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id/socs/imx93" project_base_path="component/silicon_id">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id_soc.c"/>
      </source>
      <source relative_path=".." type="c_include">
        <files mask="fsl_silicon_id_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id_imx93.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path=".." type="c_include"/>
        <include_path relative_path=".." type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.silicon_id_imxrt10xx.MIMX8ML8" name="silicon_id_rt10xx" brief="Driver silicon_id rt10xx" version="2.0.0" full_name="Driver silicon_id_rt10xx" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id/socs/rt10xx" project_base_path="component/silicon_id">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id_soc.c"/>
      </source>
      <source relative_path=".." type="c_include">
        <files mask="fsl_silicon_id_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id_imxrt10xx.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path=".." type="c_include"/>
        <include_path relative_path=".." type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.silicon_id_imxrt1170.MIMX8ML8" name="silicon_id_rt1170" brief="Driver silicon_id imxrt1170" version="2.0.0" full_name="Driver silicon_id_rt1170" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id/socs/imxrt1170" project_base_path="component/silicon_id">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id_soc.c"/>
      </source>
      <source relative_path=".." type="c_include">
        <files mask="fsl_silicon_id_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id_imxrt1170.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path=".." type="c_include"/>
        <include_path relative_path=".." type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.silicon_id_imxrt1180.MIMX8ML8" name="silicon_id_rt1180" brief="Driver silicon_id imxrt1180" version="2.0.0" full_name="Driver silicon_id_rt1180" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id/socs/imxrt1180" project_base_path="component/silicon_id">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id_soc.c"/>
      </source>
      <source relative_path=".." type="c_include">
        <files mask="fsl_silicon_id_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id_imxrt1180.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path=".." type="c_include"/>
        <include_path relative_path=".." type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.silicon_id_rw610.MIMX8ML8" name="silicon_id_rw610" brief="Driver silicon_id rw610" version="2.0.0" full_name="Driver silicon_id_rw610" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id/socs/rw610" project_base_path="component/silicon_id">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id_soc.c"/>
      </source>
      <source relative_path=".." type="c_include">
        <files mask="fsl_silicon_id_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id_rw610.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path=".." type="c_include"/>
        <include_path relative_path=".." type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.silicon_id_mcxn.MIMX8ML8" name="silicon_id_mcxn" brief="Driver silicon_id mcxn" version="2.0.0" full_name="Driver silicon_id_mcxn" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id/socs/mcxn" project_base_path="component/silicon_id">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id_soc.c"/>
      </source>
      <source relative_path=".." type="c_include">
        <files mask="fsl_silicon_id_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id_mcxn.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path=".." type="c_include"/>
        <include_path relative_path=".." type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.silicon_id_scfw.MIMX8ML8" name="silicon_id_scfw" brief="Driver silicon_id scfw" version="2.0.0" full_name="Driver silicon_id_scfw" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id/socs/scfw" project_base_path="component/silicon_id">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id_soc.c"/>
      </source>
      <source relative_path=".." type="c_include">
        <files mask="fsl_silicon_id_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id_scfw.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path=".." type="c_include"/>
        <include_path relative_path=".." type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.MIMX8ML8" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_swo.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MIMX8ML8" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SSERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value="1"/>
      </defines>
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_virtual.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.i2c_mux.MIMX8ML8" name="i2c_mux" brief="Component i2c_mux" version="1.0.0" full_name="Component i2c_mux" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/i2c/muxes" project_base_path="component/i2c/muxes">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
    </component>
    <component id="component.ak4497_adapter.MIMX8ML8" name="codec_ak4497_adapter" brief="Component ak4497 adapter for single codec" version="2.2.0" full_name="Component ak4497_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/ak4497" type="c_include">
        <files mask="fsl_codec_ak4497_adapter.h"/>
      </source>
      <source relative_path="port/ak4497" type="src">
        <files mask="fsl_codec_ak4497_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ak4497_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/ak4497" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/ak4497" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.codec_adapters.MIMX8ML8" name="codec_adapters" brief="Component codec adapters for multi codec" version="2.2.0" full_name="Component codec_adapters" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec/" project_base_path="codec">
      <defines>
        <define name="CODEC_MULTI_ADAPTERS" value="1"/>
      </defines>
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_codec_adapters.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.cs42448_adapter.MIMX8ML8" name="codec_cs42448_adapter" brief="Component cs42448 adapter for single codec" version="2.2.1" full_name="Component cs42448_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/cs42448" type="c_include">
        <files mask="fsl_codec_cs42448_adapter.h"/>
      </source>
      <source relative_path="port/cs42448" type="src">
        <files mask="fsl_codec_cs42448_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_cs42448_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/cs42448" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/cs42448" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.cs42888_adapter.MIMX8ML8" name="codec_cs42888_adapter" brief="Component cs42888 adapter for single codec" version="2.2.1" full_name="Component cs42888_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/cs42888" type="c_include">
        <files mask="fsl_codec_cs42888_adapter.h"/>
      </source>
      <source relative_path="port/cs42888" type="src">
        <files mask="fsl_codec_cs42888_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_cs42888_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/cs42888" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/cs42888" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.da7212_adapter.MIMX8ML8" name="codec_da7212_adapter" brief="Component da7212 adapter for single codec" version="2.2.0" full_name="Component da7212_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/da7212" type="c_include">
        <files mask="fsl_codec_da7212_adapter.h"/>
      </source>
      <source relative_path="port/da7212" type="src">
        <files mask="fsl_codec_da7212_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_da7212_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/da7212" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/da7212" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.pcm186x_adapter.MIMX8ML8" name="codec_pcm186x_adapter" brief="Component pcm186x adapter for single codec" version="2.0.0" full_name="Component pcm186x_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/pcm186x" type="c_include">
        <files mask="fsl_codec_pcm186x_adapter.h"/>
      </source>
      <source relative_path="port/pcm186x" type="src">
        <files mask="fsl_codec_pcm186x_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_pcm186x_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/pcm186x" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/pcm186x" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.pcm512x_adapter.MIMX8ML8" name="codec_pcm512x_adapter" brief="Component pcm512x adapter for single codec" version="2.0.0" full_name="Component pcm512x_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/pcm512x" type="c_include">
        <files mask="fsl_codec_pcm512x_adapter.h"/>
      </source>
      <source relative_path="port/pcm512x" type="src">
        <files mask="fsl_codec_pcm512x_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_pcm512x_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/pcm512x" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/pcm512x" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.sgtl_adapter.MIMX8ML8" name="codec_sgtl_adapter" brief="Component sgtl5000 adapter for single codec" version="2.2.0" full_name="Component sgtl_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/sgtl5000" type="c_include">
        <files mask="fsl_codec_sgtl_adapter.h"/>
      </source>
      <source relative_path="port/sgtl5000" type="src">
        <files mask="fsl_codec_sgtl_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_sgtl_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/sgtl5000" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/sgtl5000" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.tfa9896_adapter.MIMX8ML8" name="codec_tfa9896_adapter" brief="Component tfa9896 adapter for single codec" version="2.2.0" full_name="Component tfa9896_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/tfa9896" type="c_include">
        <files mask="fsl_codec_tfa9896_adapter.h"/>
      </source>
      <source relative_path="port/tfa9896" type="src">
        <files mask="fsl_codec_tfa9896_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_tfa9896_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/tfa9896" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/tfa9896" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.tfa9xxx_adapter.MIMX8ML8" name="codec_tfa9xxx_adapter" brief="Component tfa9xxx adapter for single codec" version="2.2.0" full_name="Component tfa9xxx_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/tfa9xxx" type="c_include">
        <files mask="fsl_codec_tfa9xxx_adapter.h"/>
      </source>
      <source relative_path="port/tfa9xxx" type="src">
        <files mask="fsl_codec_tfa9xxx_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_tfa9xxx_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/tfa9xxx" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/tfa9xxx" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.wm8524_adapter.MIMX8ML8" name="codec_wm8524_adapter" brief="Component wm8524 adapter for single codec" version="2.2.0" full_name="Component wm8524_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/wm8524" type="c_include">
        <files mask="fsl_codec_wm8524_adapter.h"/>
      </source>
      <source relative_path="port/wm8524" type="src">
        <files mask="fsl_codec_wm8524_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_wm8524_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/wm8524" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/wm8524" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.wm8904_adapter.MIMX8ML8" name="codec_wm8904_adapter" brief="Component wm8904 adapter for single codec" version="2.2.0" full_name="Component wm8904_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec/" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/wm8904" type="c_include">
        <files mask="fsl_codec_wm8904_adapter.h"/>
      </source>
      <source relative_path="port/wm8904" type="src">
        <files mask="fsl_codec_wm8904_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_wm8904_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/wm8904" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/wm8904" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.wm8960_adapter.MIMX8ML8" name="codec_wm8960_adapter" brief="Component wm8960 adapter for single codecs" version="2.2.0" full_name="Component wm8960_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec/" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/wm8960" type="c_include">
        <files mask="fsl_codec_wm8960_adapter.h"/>
      </source>
      <source relative_path="port/wm8960" type="src">
        <files mask="fsl_codec_wm8960_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_wm8960_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/wm8960" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/wm8960" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.wm8962_adapter.MIMX8ML8" name="codec_wm8962_adapter" brief="Component wm8962 adapter for single codecs" version="2.2.0" full_name="Component wm8962_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec/" project_base_path="codec">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="port/wm8962" type="c_include">
        <files mask="fsl_codec_wm8962_adapter.h"/>
      </source>
      <source relative_path="port/wm8962" type="src">
        <files mask="fsl_codec_wm8962_adapter.c"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_wm8962_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="port/wm8962" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="port/wm8962" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.codec.MIMX8ML8" name="codec" brief="Driver codec" version="2.3.1" full_name="Driver codec" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/codec" project_base_path="codec">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxKZ"/>
          <device_dependency value="MIMX8ML8xxxLZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_codec.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="project_template.MIMX8ML8.MIMX8ML8" name="MIMX8ML8" brief="Devices_project_template MIMX8ML8" version="1.0.0" full_name="Devices_project_template MIMX8ML8" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="devices/MIMX8ML8/project_template" project_base_path="board">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <any_of>
            <all>
              <component_dependency value="platform.utilities.assert.MIMX8ML8"/>
              <component_dependency value="utility.debug_console.MIMX8ML8"/>
              <component_dependency value="utility.debug_console_template_config.MIMX8ML8"/>
              <component_dependency value="component.serial_manager.MIMX8ML8"/>
              <component_dependency value="component.serial_manager_uart.MIMX8ML8"/>
            </all>
            <all>
              <component_dependency value="platform.utilities.assert_lite.MIMX8ML8"/>
              <component_dependency value="utility.debug_console_lite.MIMX8ML8"/>
            </all>
          </any_of>
          <component_dependency value="device.MIMX8ML8_CMSIS.MIMX8ML8"/>
          <component_dependency value="device.MIMX8ML8_startup.MIMX8ML8"/>
          <component_dependency value="driver.audiomix.MIMX8ML8"/>
          <component_dependency value="platform.drivers.clock.MIMX8ML8"/>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
          <component_dependency value="platform.drivers.iuart.MIMX8ML8"/>
          <component_dependency value="platform.drivers.rdc.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" config="true" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_project_template.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.MIMX8ML8_linker.MIMX8ML8" name="MIMX8ML8_linker" brief="Device MIMX8ML8_linker" version="1.0.0" full_name="Device MIMX8ML8_linker" category="Device/SDK Utilities" user_visible="true" type="linker" package_base_path="devices/MIMX8ML8" project_base_path="MIMX8ML8">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxLZ"/>
          <device_dependency value="MIMX8ML8xxxKZ"/>
        </any_of>
      </dependencies>
    </component>
    <component id="RTE_Device.MIMX8ML8" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="devices/MIMX8ML8/template" project_base_path="board">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxLZ"/>
          <device_dependency value="MIMX8ML8xxxKZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_RTE.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.enet.MIMX8ML8" name="enet" brief="ENET Driver" version="2.9.2" full_name="ENET Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.memory.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_enet.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.enet_qos.MIMX8ML8" name="enet_qos" brief="ENET QoS Driver" version="2.6.5" full_name="ENET QoS Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.memory.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet_qos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet_qos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_enet_qos.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sdma.MIMX8ML8" name="sdma" brief="SDMA Driver" version="2.4.2" full_name="SDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.memory.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sdma.h"/>
        <files mask="fsl_sdma_script.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sdma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sdma.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ecspi_sdma.MIMX8ML8" name="ecspi_sdma" brief="ECSPI SDMA Driver" version="2.2.0" full_name="ECSPI SDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.sdma.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ecspi_sdma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ecspi_sdma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ecspi_sdma.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iuart_sdma.MIMX8ML8" name="iuart_sdma" brief="IUART SDMA Driver" version="2.3.0" full_name="IUART SDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.sdma.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_sdma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_sdma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_iuart_sdma.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai_sdma.MIMX8ML8" name="sai_sdma" brief="SAI SDMA Driver" version="2.6.0" full_name="SAI SDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.sdma.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai_sdma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai_sdma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sai_sdma.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MIMX8ML8" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.iuart_adapter.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_uart.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MIMX8ML8" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="devices/MIMX8ML8/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.iuart_adapter.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="debug_console_lite" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source relative_path="debug_console_lite" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_debug_console_lite.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="debug_console_lite" type="c_include"/>
        <include_path relative_path="debug_console_lite" type="asm_include"/>
      </include_paths>
    </component>
    <component id="device.MIMX8ML8_CMSIS.MIMX8ML8" name="MIMX8ML8_CMSIS" brief="Device MIMX8ML8_cmsis" version="1.0.0" full_name="Device MIMX8ML8_cmsis" category="Device/CMSIS" user_visible="true" type="CMSIS_Include" package_base_path="devices/MIMX8ML8" project_base_path="device">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="CMSIS_Include_core_cm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="MIMX8ML8_cm7.h"/>
        <files mask="MIMX8ML8_cm7_features.h"/>
        <files mask="MIMX8ML8_cm7_COMMON.h"/>
      </source>
      <source relative_path="periph" type="c_include">
        <files mask="PERI_AIPSTZ.h"/>
        <files mask="PERI_APBH.h"/>
        <files mask="PERI_ASRC.h"/>
        <files mask="PERI_AUDIOMIX.h"/>
        <files mask="PERI_AUDIOPACKETIZER.h"/>
        <files mask="PERI_AUDIOSAMPLEGP.h"/>
        <files mask="PERI_BCH.h"/>
        <files mask="PERI_CAN.h"/>
        <files mask="PERI_CCM.h"/>
        <files mask="PERI_CCM_ANALOG.h"/>
        <files mask="PERI_CEC.h"/>
        <files mask="PERI_COLORSPACECONVERTER.h"/>
        <files mask="PERI_DDRC.h"/>
        <files mask="PERI_DDR_BLK_CTL.h"/>
        <files mask="PERI_DMA.h"/>
        <files mask="PERI_DWC_DDRPHYA_ANIB.h"/>
        <files mask="PERI_DWC_DDRPHYA_APBONLY.h"/>
        <files mask="PERI_DWC_DDRPHYA_DBYTE.h"/>
        <files mask="PERI_DWC_DDRPHYA_DRTUB.h"/>
        <files mask="PERI_DWC_DDRPHYA_INITENG.h"/>
        <files mask="PERI_DWC_DDRPHYA_MASTER.h"/>
        <files mask="PERI_EARC.h"/>
        <files mask="PERI_ECSPI.h"/>
        <files mask="PERI_EDDC.h"/>
        <files mask="PERI_ENET.h"/>
        <files mask="PERI_ENET_QOS.h"/>
        <files mask="PERI_FLEXSPI.h"/>
        <files mask="PERI_FRAMECOMPOSER.h"/>
        <files mask="PERI_GLUE_USB.h"/>
        <files mask="PERI_GPC.h"/>
        <files mask="PERI_GPC_PGC.h"/>
        <files mask="PERI_GPIO.h"/>
        <files mask="PERI_GPMI.h"/>
        <files mask="PERI_GPT.h"/>
        <files mask="PERI_HDCP.h"/>
        <files mask="PERI_HDCP22.h"/>
        <files mask="PERI_HDMI_TRNG.h"/>
        <files mask="PERI_HDMI_TX_BLK_CTL.h"/>
        <files mask="PERI_HSIO_BLK_CTRL.h"/>
        <files mask="PERI_HTX_PAI.h"/>
        <files mask="PERI_HTX_PVI.h"/>
        <files mask="PERI_I2C.h"/>
        <files mask="PERI_I2S.h"/>
        <files mask="PERI_IDENTIFICATION.h"/>
        <files mask="PERI_INTERRUPT.h"/>
        <files mask="PERI_IOMUXC.h"/>
        <files mask="PERI_IOMUXC_GPR.h"/>
        <files mask="PERI_IRQSTEER.h"/>
        <files mask="PERI_ISI.h"/>
        <files mask="PERI_LCDIF.h"/>
        <files mask="PERI_MAINCONTROLLER.h"/>
        <files mask="PERI_MEDIA_BLK_CTRL.h"/>
        <files mask="PERI_MIPI_CSI.h"/>
        <files mask="PERI_MIPI_DSI.h"/>
        <files mask="PERI_MU.h"/>
        <files mask="PERI_NPU.h"/>
        <files mask="PERI_OCOTP.h"/>
        <files mask="PERI_PCIE.h"/>
        <files mask="PERI_PCIE_PHY.h"/>
        <files mask="PERI_PDM.h"/>
        <files mask="PERI_PHYCONFIGURATION.h"/>
        <files mask="PERI_PWM.h"/>
        <files mask="PERI_RDC.h"/>
        <files mask="PERI_RDC_SEMAPHORE.h"/>
        <files mask="PERI_SDMAARM.h"/>
        <files mask="PERI_SEMA4.h"/>
        <files mask="PERI_SNVS.h"/>
        <files mask="PERI_SPBA.h"/>
        <files mask="PERI_SRC.h"/>
        <files mask="PERI_SYS_CTR_COMPARE.h"/>
        <files mask="PERI_SYS_CTR_CONTROL.h"/>
        <files mask="PERI_SYS_CTR_READ.h"/>
        <files mask="PERI_TMU.h"/>
        <files mask="PERI_UART.h"/>
        <files mask="PERI_USB.h"/>
        <files mask="PERI_USDHC.h"/>
        <files mask="PERI_VIDEOPACKETIZER.h"/>
        <files mask="PERI_VIDEOSAMPLER.h"/>
        <files mask="PERI_VPU_BLK_CTL.h"/>
        <files mask="PERI_VPU_G1.h"/>
        <files mask="PERI_VPU_G1_H264.h"/>
        <files mask="PERI_VPU_G1_VP7_VP8.h"/>
        <files mask="PERI_VPU_G1_VP8.h"/>
        <files mask="PERI_VPU_G2.h"/>
        <files mask="PERI_VPU_H264.h"/>
        <files mask="PERI_VPU_HEVC.h"/>
        <files mask="PERI_WDOG.h"/>
        <files mask="PERI_XTALOSC.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_CMSIS.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="periph" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
        <include_path relative_path="periph" type="asm_include"/>
      </include_paths>
    </component>
    <component id="device.MIMX8ML8_system.MIMX8ML8" name="MIMX8ML8_system" brief="Device MIMX8ML8_system" version="1.0.0" full_name="Device MIMX8ML8_system" category="Device/CMSIS" user_visible="true" type="CMSIS_Include" package_base_path="devices/MIMX8ML8" project_base_path="device">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="device.MIMX8ML8_CMSIS.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_MIMX8ML8_cm7.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_MIMX8ML8_cm7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_system.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="device.MIMX8ML8_startup.MIMX8ML8" name="MIMX8ML8_startup" brief="Device MIMX8ML8_startup" version="1.0.0" full_name="Device MIMX8ML8_startup" category="Device/Startup" user_visible="true" type="startup" package_base_path="devices/MIMX8ML8" project_base_path="startup">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="device.MIMX8ML8_system.MIMX8ML8"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" config="true" type="asm_include">
        <files mask="startup_MIMX8ML8_cm7.S"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_startup.MIMX8ML8.cmake" hidden="true"/>
      </source>
    </component>
    <component id="CMSIS_Include_core_cm.MIMX8ML8" name="CMSIS_Include_CM" brief="CMSIS-CORE for Cortex-M, ARMv8-M, ARMv8.1-M" version="6.1.0" full_name="CMSIS Include For Cortex-M, ARMv8-M, ARMv8.1-M" category="CMSIS/CORE" user_visible="true" type="CMSIS_Include" package_base_path="CMSIS/Core/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <any_of>
            <device_core_dependency value="cm7_MIMX8ML8xxxLZ"/>
            <device_core_dependency value="cm7_MIMX8ML8xxxKZ"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
        </all>
      </dependencies>
      <source compiler="compiler_gcc" relative_path="./" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_gcc.h"/>
      </source>
      <source compiler="compiler_gcc" relative_path="m-profile" type="c_include">
        <files mask="cmsis_gcc_m.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="core_cm7.h"/>
      </source>
      <source relative_path="m-profile" type="c_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="armv7m_cachel1.h"/>
        <files mask="armv7m_mpu.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Include_core_cm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="m-profile" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
        <include_path relative_path="m-profile" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_RTX.MIMX8ML8" name="CMSIS_RTOS2_RTX5" brief="CMSIS-RTOS2 RTX5 for Cortex-M, SC000, C300 and Armv8-M (Library)" version="5.9.0" full_name="CMSIS RTOS2 RTX5" category="CMSIS/RTOS2" user_visible="true" type="CMSIS_driver" package_base_path="CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <defines>
        <define name="CMSIS_device_header" value="'&quot;fsl_device_registers.h&quot;'"/>
        <define name="RTE_COMPONENTS_H" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="CMSIS_Device_API_OSTick.MIMX8ML8"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_delay.c"/>
        <files mask="rtx_evflags.c"/>
        <files mask="rtx_evr.c"/>
        <files mask="rtx_kernel.c"/>
        <files mask="rtx_memory.c"/>
        <files mask="rtx_mempool.c"/>
        <files mask="rtx_msgqueue.c"/>
        <files mask="rtx_mutex.c"/>
        <files mask="rtx_semaphore.c"/>
        <files mask="rtx_system.c"/>
        <files mask="rtx_thread.c"/>
        <files mask="rtx_timer.c"/>
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
        <files mask="rtx_def.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <source relative_path="Source" type="src" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="os_systick.c"/>
      </source>
      <source toolchain="armgcc" relative_path="RTX/Source/GCC" type="asm_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="irq_armv7m.S"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_RTOS2_RTX.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
        <include_path relative_path="RTX/Include" type="asm_include"/>
        <include_path relative_path="RTX/Config" type="asm_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_RTX_LIB.MIMX8ML8" name="CMSIS_RTOS2_RTX5_Library" brief="CMSIS-RTOS2 RTX5 for Cortex-M, SC000, C300 and Armv8-M (Library)" version="5.9.0" full_name="CMSIS RTOS2 RTX5" category="CMSIS/RTOS2" user_visible="true" type="CMSIS_driver" package_base_path="CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="CMSIS_Device_API_OSTick.MIMX8ML8"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.MIMX8ML8"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="RTX/Library/GCC" project_relative_path="./" type="lib" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="libRTX_V7MF.a"/>
      </source>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
        <files mask="rtx_def.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="RTX/Library/GCC" type="lib" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="libRTX_V7MF.a"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_RTOS2_RTX_LIB.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Source" type="c_include"/>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
        <include_path relative_path="RTX/Source" type="asm_include"/>
        <include_path relative_path="RTX/Include" type="asm_include"/>
        <include_path relative_path="RTX/Config" type="asm_include"/>
      </include_paths>
    </component>
    <component id="utility.str.MIMX8ML8" name="utility_str" brief="Utility str" version="1.0.0" full_name="Utility str" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="devices/MIMX8ML8/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="str" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="str" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_str.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" type="c_include"/>
        <include_path relative_path="str" type="asm_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console.MIMX8ML8" name="debug_console" brief="Utility debug_console" version="1.0.1" full_name="Utility debug_console" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="devices/MIMX8ML8/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.serial_manager.MIMX8ML8"/>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
          <component_dependency value="utility.str.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="debug_console" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source relative_path="debug_console" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_debug_console.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="debug_console" type="c_include"/>
        <include_path relative_path="debug_console" type="asm_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_template_config.MIMX8ML8" name="debug_console_template_config" brief="Utility debug_console Template Config" version="1.0.0" full_name="Utility debug_console Template Config" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="devices/MIMX8ML8/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="utility.debug_console.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="debug_console/config" config="true" type="c_include">
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_debug_console_template_config.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="debug_console/config" type="c_include"/>
        <include_path relative_path="debug_console/config" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.assert.MIMX8ML8" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="devices/MIMX8ML8/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
          <component_dependency value="utility.debug_console.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_assert.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_assert.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.assert_lite.MIMX8ML8" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="devices/MIMX8ML8/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <not>
            <component_dependency value="platform.utilities.assert.MIMX8ML8"/>
          </not>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
          <component_dependency value="utility.debug_console_lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_assert.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_assert_lite.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.MIMX8ML8" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="11.0.1" full_name="FreeRTOS kernel" category="RTOS/Core" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <defines>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.freertos-kernel.heap_1.MIMX8ML8"/>
            <component_dependency value="middleware.freertos-kernel.heap_2.MIMX8ML8"/>
            <component_dependency value="middleware.freertos-kernel.heap_3.MIMX8ML8"/>
            <component_dependency value="middleware.freertos-kernel.heap_4.MIMX8ML8"/>
            <component_dependency value="middleware.freertos-kernel.heap_5.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.config.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="croutine.c"/>
        <files mask="event_groups.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="atomic.h"/>
        <files mask="croutine.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_syscall_numbers.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="StackMacros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM4F" type="src" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM4F" type="c_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="portmacro.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM4F" toolchain="armgcc" type="c_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ"/>
        <include_path relative_path="include" type="asm_include"/>
        <include_path relative_path="portable/GCC/ARM_CM4F" toolchain="armgcc" type="asm_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.extension.MIMX8ML8" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="11.0.1" full_name="FreeRTOS NXP extension" category="RTOS/TAD extension" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_extension.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.use_newlib_reentrant.MIMX8ML8" name="FreeRTOS NXP Newlib Reentrant" brief="FreeRTOS NXP Newlib Reentrant" version="11.0.1" full_name="FreeRTOS NXP Newlib Reentrant" category="RTOS/TAD Newlib Reentrant" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="newlib-freertos.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_use_newlib_reentrant.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.use_picolibc_tls.MIMX8ML8" name="FreeRTOS NXP Picolibc TLS" brief="FreeRTOS NXP Picolibc TLS" version="11.0.1" full_name="FreeRTOS NXP Picolibc TLS" category="RTOS/TAD Picolibc TLS" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="picolibc-freertos.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_use_picolibc_tls.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.MIMX8ML8" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="11.0.1" full_name="FreeRTOS heap 1" category="RTOS/Heap" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_1.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.MIMX8ML8" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="11.0.1" full_name="FreeRTOS heap 2" category="RTOS/Heap" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_2.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.MIMX8ML8" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="11.0.1" full_name="FreeRTOS heap_3" category="RTOS/Heap" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_3.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.MIMX8ML8" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="11.0.1" full_name="FreeRTOS heap 4" category="RTOS/Heap" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_4.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.MIMX8ML8" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="11.0.1" full_name="FreeRTOS heap 5" category="RTOS/Heap" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.MIMX8ML8" name="old FreeRTOS MPU wrappers used before V10.6.0" brief="old FreeRTOS MPU wrappers used before V10.6.0" version="11.0.1" full_name="old FreeRTOS MPU wrappers used before V10.6.0" category="RTOS/MPU wrappers" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_mpu_wrappers.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers_v2.MIMX8ML8" name="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" brief="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" version="11.0.1" full_name="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" category="RTOS/MPU wrappers V2" user_visible="true" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers_v2.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_mpu_wrappers_v2.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.config.MIMX8ML8" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="11.0.1" full_name="FreeRTOS configuration template" category="RTOS/freertos template" user_visible="true" type="project_template" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="template" config="true" type="c_include">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source relative_path="template/ARM_CM4F_4_priority_bits" config="true" type="c_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ">
        <files mask="FreeRTOSConfig_Gen.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_config.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="template" type="c_include"/>
        <include_path relative_path="template/ARM_CM4F_4_priority_bits" type="c_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ"/>
        <include_path relative_path="template" type="asm_include"/>
        <include_path relative_path="template/ARM_CM4F_4_priority_bits" type="asm_include" device_cores="cm7_MIMX8ML8xxxLZ cm7_MIMX8ML8xxxKZ"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iuart_freertos.MIMX8ML8" name="iuart_freertos" brief="IUART Freertos Driver" version="2.1.1" full_name="IUART Freertos Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.iuart.MIMX8ML8"/>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_iuart_freertos.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ii2c_freertos.MIMX8ML8" name="ii2c_freertos" brief="I2C Freertos Driver" version="2.0.7" full_name="II2C Freertos Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.ii2c.MIMX8ML8"/>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ii2c_freertos.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ecspi_freertos.MIMX8ML8" name="ecspi_freertos" brief="ECSPI FreeRTOS Driver" version="2.2.0" full_name="ECSPI FreeRTOS Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.ecspi.MIMX8ML8"/>
          <component_dependency value="middleware.freertos-kernel.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ecspi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ecspi_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ecspi_freertos.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wdog01.MIMX8ML8" name="wdog" brief="wdog01 Driver" version="2.2.0" full_name="wdog01 Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wdog.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wdog.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wdog01.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tmu_2.MIMX8ML8" name="tmu" brief="TMU Driver" version="2.0.0" full_name="TMU Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_tmu.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tmu.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_tmu_2.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sema4.MIMX8ML8" name="sema4" brief="SEMA4 Driver" version="2.2.0" full_name="SEMA4 Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sema4.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sema4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sema4.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai.MIMX8ML8" name="sai" brief="SAI Driver" version="2.4.7" full_name="SAI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sai.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rdc_sema42.MIMX8ML8" name="rdc_sema42" brief="RDC SEMA42 Driver" version="2.0.4" full_name="RDC SEMA42 Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rdc_sema42.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rdc_sema42.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_rdc_sema42.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rdc.MIMX8ML8" name="rdc" brief="RDC Driver" version="2.2.0" full_name="RDC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rdc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rdc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_rdc.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pdm.MIMX8ML8" name="pdm" brief="PDM Driver" version="2.9.1" full_name="PDM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pdm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pdm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pdm.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pdm_sdma.MIMX8ML8" name="pdm_sdma" brief="PDM SDMA Driver" version="2.7.0" full_name="PDM SDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.pdm.MIMX8ML8"/>
          <component_dependency value="platform.drivers.sdma.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pdm_sdma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pdm_sdma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pdm_sdma.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mu.MIMX8ML8" name="mu" brief="MU Driver" version="2.2.0" full_name="MU Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_mu.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iuart.MIMX8ML8" name="iuart" brief="IUART Driver" version="2.3.2" full_name="IUART Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxLZ"/>
          <device_dependency value="MIMX8ML8xxxKZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_iuart.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iuart_cmsis.MIMX8ML8" name="uart_cmsis" brief="UART CMSIS Driver" version="2.1.0" full_name="IUART CMSIS Driver" category="CMSIS Driver/USART" user_visible="true" type="CMSIS_driver" package_base_path="devices/MIMX8ML8/cmsis_drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="CMSIS_Driver_Include.USART.MIMX8ML8"/>
          <component_dependency value="RTE_Device.MIMX8ML8"/>
          <component_dependency value="platform.drivers.iuart.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_iuart.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ipwm.MIMX8ML8" name="ipwm" brief="PWM Driver" version="2.0.1" full_name="PWM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxLZ"/>
          <device_dependency value="MIMX8ML8xxxKZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pwm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ipwm.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ii2c.MIMX8ML8" name="i2c" brief="I2C Driver" version="2.0.7" full_name="I2C Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <any_of>
          <device_dependency value="MIMX8ML8xxxLZ"/>
          <device_dependency value="MIMX8ML8xxxKZ"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ii2c.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ii2c_cmsis.MIMX8ML8" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.2.0" full_name="II2C CMSIS Driver" category="CMSIS Driver/I2C" user_visible="true" type="CMSIS_driver" package_base_path="devices/MIMX8ML8/cmsis_drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="CMSIS_Driver_Include.I2C.MIMX8ML8"/>
          <component_dependency value="RTE_Device.MIMX8ML8"/>
          <component_dependency value="platform.drivers.ii2c.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_ii2c.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.igpio.MIMX8ML8" name="gpio" brief="GPIO Driver" version="2.0.6" full_name="igpio" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_igpio.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpt.MIMX8ML8" name="gpt" brief="GPT Driver" version="2.0.5" full_name="GPT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_gpt.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpt.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_gpt.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpc_2.MIMX8ML8" name="gpc" brief="GPC Driver" version="2.2.0" full_name="GPC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_gpc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_gpc_2.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcan.MIMX8ML8" name="flexcan" brief="FLEXCAN Driver" version="2.14.1" full_name="FLEXCAN Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexcan.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexcan.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexcan.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.enet_cmsis.MIMX8ML8" name="enet_cmsis" brief="ENET CMSIS Driver" version="2.4.0" full_name="ENET CMSIS Driver" category="CMSIS Driver/Ethernet" user_visible="true" type="CMSIS_driver" package_base_path="devices/MIMX8ML8/cmsis_drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="CMSIS_Driver_Include.Ethernet.MIMX8ML8"/>
          <component_dependency value="CMSIS_Driver_Include.Ethernet_MAC.MIMX8ML8"/>
          <component_dependency value="CMSIS_Driver_Include.Ethernet_PHY.MIMX8ML8"/>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
          <component_dependency value="RTE_Device.MIMX8ML8"/>
          <component_dependency value="platform.drivers.enet.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet_cmsis.h"/>
        <files mask="fsl_enet_phy_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet_cmsis.c"/>
        <files mask="fsl_enet_phy_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_enet.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ecspi.MIMX8ML8" name="ecspi" brief="ECSPI Driver" version="2.3.3" full_name="ECSPI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ecspi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ecspi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ecspi.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ecspi_cmsis.MIMX8ML8" name="ecspi_cmsis" brief="ECSPI CMSIS Driver" version="2.3.0" full_name="ECSPI CMSIS Driver" category="CMSIS Driver/SPI" user_visible="true" type="CMSIS_driver" package_base_path="devices/MIMX8ML8/cmsis_drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="CMSIS_Driver_Include.SPI.MIMX8ML8"/>
          <component_dependency value="RTE_Device.MIMX8ML8"/>
          <component_dependency value="platform.drivers.ecspi.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ecspi_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ecspi_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_ecspi.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.easrc.MIMX8ML8" name="asrc" brief="asrc Driver" version="2.0.6" full_name="asrc Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_asrc.h"/>
        <files mask="fsl_asrc_firmware.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_asrc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_easrc.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.easrc_sdma.MIMX8ML8" name="asrc_sdma" brief="asrc_sdma Driver" version="2.0.3" full_name="asrc_m2m_sdma Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.easrc.MIMX8ML8"/>
          <component_dependency value="platform.drivers.sdma.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_asrc_sdma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_asrc_sdma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_easrc_sdma.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cache_armv7_m7.MIMX8ML8" name="cache" brief="CACHE Driver" version="2.0.4" full_name="CACHE Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="devices/MIMX8ML8/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cache_armv7_m7.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.voice_spot.model.MIMX8ML8" name="voice_spot model" brief="Voice Spot Hey NXP model" version="0.24.1" full_name="middleware voice_spot model" category="Voice/VoiceSpot library" user_visible="true" type="middleware" package_base_path="middleware/audio_voice/components/voice_spot" project_base_path="voice_spot">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.voice_spot.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="models/NXP/version_1" type="c_include">
        <files mask="HeyNXP_en-US_1.h"/>
        <files mask="HeyNXP_en-US_1_params.h"/>
      </source>
      <source relative_path="models/NXP/version_1" type="binary">
        <files mask="HeyNXP_en-US_1.bin"/>
        <files mask="HeyNXP_en-US_1_params.bin"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_voice_spot_model.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="models/NXP/version_1" type="c_include"/>
        <include_path relative_path="models/NXP/version_1" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.voice_spot.cm7_iMX8MP.MIMX8ML8" name="voice_spot" brief="Voice Spot library for Cortex M7" version="0.24.1" full_name="middleware voice_spot cm7" category="Voice/VoiceSpot library" user_visible="true" type="middleware" package_base_path="middleware/audio_voice/components/voice_spot" project_base_path="voice_spot">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.voice_spot.model.MIMX8ML8"/>
          <board_dependency value="evkmimx8mp"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="ARM_CortexM7/lib/include/public" type="c_include">
        <files mask="rdsp_model.h"/>
        <files mask="rdsp_model_defines.h"/>
        <files mask="rdsp_voicespot.h"/>
        <files mask="rdsp_voicespot_defines.h"/>
        <files mask="rdsp_voicespot_sleep_cbuffer.h"/>
        <files mask="rdsp_voicespot_utils.h"/>
      </source>
      <source toolchain="armgcc" relative_path="ARM_CortexM7/lib" type="lib">
        <files mask="libvoicespot.a"/>
      </source>
      <source exclude="true" relative_path="Doc" type="doc">
        <files mask="VSAPIDUG.pdf" hidden="true"/>
      </source>
      <source exclude="true" relative_path="ARM_CortexM7/example_app" type="src">
        <files mask="basic_main.c" hidden="true"/>
      </source>
      <source exclude="true" relative_path="ARM_CortexM7/example_app" type="c_include">
        <files mask="basic_main.h" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_voice_spot_cm7_iMX8MP.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="ARM_CortexM7/lib/include" toolchain="armgcc" type="c_include"/>
        <include_path relative_path="ARM_CortexM7/lib/include" toolchain="armgcc" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.audio_voice.components.voice_seeker.cm7.MIMX8ML8" name="voice_seeker" brief="Voice seeker library for Cortex M7" version="0.6.9" full_name="middleware voice_seeker cm7" category="Voice/Voice Control AFE" user_visible="true" type="middleware" package_base_path="middleware/audio_voice/components/voice_seeker/ARM_CortexM7" project_base_path="voice_seeker">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.audio_voice.components.voice_seeker.rdsp_utilities_public.cm7.MIMX8ML8"/>
          <board_dependency value="evkmimx8mp"/>
        </all>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="COPYING-BSD-3.txt"/>
        <files mask="LICENSE.txt"/>
        <files mask="SCR-ARM_CortexM7_Voiceseeker_no_aec-v0.6.9.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="include" type="c_include">
        <files mask="RdspCycleCounter.h"/>
        <files mask="RdspStatusCodes.h"/>
        <files mask="libVoiceSeekerLight.h"/>
      </source>
      <source toolchain="armgcc" relative_path="lib" type="lib">
        <files mask="libvoiceseeker_no_aec.a"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_audio_voice_components_voice_seeker_cm7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" toolchain="armgcc" type="c_include"/>
        <include_path relative_path="include" toolchain="armgcc" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.audio_voice.components.voice_seeker.rdsp_utilities_public.cm7.MIMX8ML8" name="voice_seeker memory utils" brief="Voice seeker memory utilities for Cortex M7" version="0.6.9" full_name="middleware voice_seeker memory utils cm7" category="Voice/Voice Control AFE" user_visible="true" type="middleware" package_base_path="middleware/audio_voice/components/voice_seeker/ARM_CortexM7/rdsp_utilities_public" project_base_path="voice_seeker/ARM_CortexM7/rdsp_utilities_public">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <board_dependency value="evkmimx8mp"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="include" type="c_include">
        <files mask="RdspDeviceConfig.h"/>
        <files mask="RdspPlatforms.h"/>
        <files mask="RdspTypes.h"/>
      </source>
      <source toolchain="armgcc" relative_path="rdsp_memory_utils_public" type="c_include">
        <files mask="RdspMemoryUtilsPublic.h"/>
        <files mask="RdspStackCheck.h"/>
        <files mask="memcheck.h"/>
      </source>
      <source toolchain="armgcc" relative_path="rdsp_memory_utils_public" type="src">
        <files mask="RdspMemoryUtilsPublic.c"/>
        <files mask="memcheck.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_audio_voice_components_voice_seeker_rdsp_utilities_public_cm7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" toolchain="armgcc" type="c_include"/>
        <include_path relative_path="rdsp_memory_utils_public" toolchain="armgcc" type="c_include"/>
        <include_path relative_path="include" toolchain="armgcc" type="asm_include"/>
        <include_path relative_path="rdsp_memory_utils_public" toolchain="armgcc" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg-lite.bm.MIMX8ML8" name="rpmsg_lite" brief="RPMsg-Lite BM environment sources" version="5.1.4" full_name="RPMsg-Lite baremetal environment layer sources" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include/environment/bm" type="c_include">
        <files mask="rpmsg_env_specific.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite/porting/environment" type="src">
        <files mask="rpmsg_env_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite_bm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg-lite/lib/include/environment/bm" type="c_include"/>
        <include_path relative_path="rpmsg-lite/lib/include/environment/bm" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg-lite.freertos.MIMX8ML8" name="rpmsg_lite" brief="RPMsg-Lite FreeRTOS environment sources" version="5.1.4" full_name="RPMsg-Lite FreeRTOS environment layer sources" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include/environment/freertos" type="c_include">
        <files mask="rpmsg_env_specific.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite/porting/environment" type="src">
        <files mask="rpmsg_env_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg-lite/lib/include/environment/freertos" type="c_include"/>
        <include_path relative_path="rpmsg-lite/lib/include/environment/freertos" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg-lite.xos.MIMX8ML8" name="rpmsg_lite xos" brief="RPMsg-Lite XOS environment layer sources" version="5.1.4" full_name="RPMsg-Lite XOS environment layer sources" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include/environment/xos" type="c_include">
        <files mask="rpmsg_env_specific.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite/porting/environment" type="src">
        <files mask="rpmsg_env_xos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite_xos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg-lite/lib/include/environment/xos" type="c_include"/>
        <include_path relative_path="rpmsg-lite/lib/include/environment/xos" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg-lite.qnx.MIMX8ML8" name="rpmsg_lite qnx" brief="RPMsg-Lite QNX environment layer sources" version="5.1.4" full_name="RPMsg-Lite QNX environment layer sources" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include/environment/qnx" type="c_include">
        <files mask="rpmsg_env_specific.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite/porting/environment" type="src">
        <files mask="rpmsg_env_qnx.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite_qnx.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg-lite/lib/include/environment/qnx" type="c_include"/>
        <include_path relative_path="rpmsg-lite/lib/include/environment/qnx" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg-lite.zephyr.MIMX8ML8" name="rpmsg_lite zephyr" brief="RPMsg-Lite Zephyr environment sources" version="5.1.4" full_name="RPMsg-Lite Zephyr environment layer sources" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include/environment/zephyr" type="c_include">
        <files mask="rpmsg_env_specific.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite/porting/environment" type="src">
        <files mask="rpmsg_env_zephyr.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite_zephyr.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg-lite/lib/include/environment/zephyr" type="c_include"/>
        <include_path relative_path="rpmsg-lite/lib/include/environment/zephyr" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg-lite.MIMX8ML8" name="rpmsg_lite" brief="RPMsg-Lite" version="5.1.4" full_name="Remote Procedure Messaging Lite library" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.rpmsg-lite.bm.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.rpmsg-lite.freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.rpmsg-lite.qnx.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.rpmsg-lite.xos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.rpmsg-lite.zephyr.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include" type="c_include">
        <files mask="llist.h"/>
        <files mask="rpmsg_compiler.h"/>
        <files mask="rpmsg_default_config.h"/>
        <files mask="rpmsg_env.h"/>
        <files mask="rpmsg_lite.h"/>
        <files mask="virtio_ring.h"/>
        <files mask="virtqueue.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/common" type="src">
        <files mask="llist.c"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite" type="src">
        <files mask="rpmsg_lite.c"/>
      </source>
      <source relative_path="rpmsg-lite/lib/virtio" type="src">
        <files mask="virtqueue.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg-lite/lib/include" type="c_include"/>
        <include_path relative_path="rpmsg-lite/lib/include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg-lite.ns.MIMX8ML8" name="rpmsg_lite" brief="RPMsg-Lite NS" version="5.1.4" full_name="Remote Procedure Messaging Lite NS library" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include" type="c_include">
        <files mask="rpmsg_ns.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite" type="src">
        <files mask="rpmsg_ns.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite_ns.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg-lite.queue.MIMX8ML8" name="rpmsg_lite" brief="RPMsg-Lite Queue" version="5.1.4" full_name="Remote Procedure Messaging Queue NS library" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include" type="c_include">
        <files mask="rpmsg_queue.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite" type="src">
        <files mask="rpmsg_queue.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite_queue.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg-lite.imx8mp_m7.MIMX8ML8" name="rpmsg_lite_imx8mp_m7" brief="RPMsg-Lite for evkmimx8mp application" version="5.1.4" full_name="Remote Procedure Messaging Lite porting layer for evkmimx8mp board" category="Multicore/Inter-Core Messaging System" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg-lite">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <any_of>
            <device_core_dependency value="cm7_MIMX8ML8xxxLZ"/>
            <device_core_dependency value="cm7_MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="platform.drivers.mu.MIMX8ML8"/>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg-lite/lib/include/platform/imx8mp_m7" type="c_include">
        <files mask="rpmsg_platform.h"/>
      </source>
      <source relative_path="rpmsg-lite/lib/rpmsg_lite/porting/platform/imx8mp_m7" type="src">
        <files mask="rpmsg_platform.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_rpmsg-lite_imx8mp_m7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg-lite/lib/include/platform/imx8mp_m7" type="c_include"/>
        <include_path relative_path="rpmsg-lite/lib/include/platform/imx8mp_m7" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.common.MIMX8ML8" name="eRPC" brief="eRPC" version="1.14.0" full_name="Embedded Remote Procedure Call" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.eRPC_dspi_master_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_dspi_slave_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_i2c_slave_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_lpi2c_slave_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_lpspi_slave_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_mu_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_rpmsg_lite_rtos_transport_master.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_rpmsg_lite_rtos_transport_remote.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_rpmsg_lite_transport_master.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_rpmsg_lite_transport_remote.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_rpmsg_tty_rtos_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_spi_master_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_spi_slave_transport.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.eRPC_uart_cmsis_transport.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/infra" type="c_include">
        <files mask="erpc_version.h"/>
        <files mask="erpc_common.h"/>
        <files mask="erpc_pre_post_action.h"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_codec.hpp"/>
        <files mask="erpc_basic_codec.hpp"/>
        <files mask="erpc_transport.hpp"/>
        <files mask="erpc_message_buffer.hpp"/>
        <files mask="erpc_message_loggers.hpp"/>
        <files mask="erpc_manually_constructed.hpp"/>
        <files mask="erpc_crc16.hpp"/>
        <files mask="erpc_client_server_common.hpp"/>
        <files mask="erpc_utils.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_basic_codec.cpp"/>
        <files mask="erpc_message_buffer.cpp"/>
        <files mask="erpc_message_loggers.cpp"/>
        <files mask="erpc_crc16.cpp"/>
        <files mask="erpc_pre_post_action.cpp"/>
        <files mask="erpc_utils.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="c_include">
        <files mask="erpc_transport_setup.h"/>
        <files mask="erpc_mbf_setup.h"/>
      </source>
      <source relative_path="erpc/erpc_c/port" type="c_include">
        <files mask="erpc_setup_extensions.h"/>
        <files mask="erpc_endianness_agnostic_example.h"/>
        <files mask="erpc_endianness_undefined.h"/>
        <files mask="erpc_config_internal.h"/>
      </source>
      <source relative_path="erpc/erpc_c/config" type="c_include">
        <files mask="erpc_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/port" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/config" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/port" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/config" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.client.MIMX8ML8" name="eRPC_client" brief="eRPC_client" version="1.14.0" full_name="eRPC client" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/infra" type="c_include">
        <files mask="erpc_client_manager.h"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_client_manager.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="c_include">
        <files mask="erpc_client_setup.h"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_client_setup.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_client.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.server.MIMX8ML8" name="eRPC_server" brief="eRPC_server" version="1.14.0" full_name="eRPC server" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_simple_server.hpp"/>
        <files mask="erpc_server.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_simple_server.cpp"/>
        <files mask="erpc_server.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="c_include">
        <files mask="erpc_server_setup.h"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_server_setup.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_server.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.arbitrator.MIMX8ML8" name="eRPC_arbitrator" brief="eRPC_arbitrator" version="1.14.0" full_name="eRPC arbitrator" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_arbitrated_client_manager.hpp"/>
        <files mask="erpc_simple_server.hpp"/>
        <files mask="erpc_server.hpp"/>
        <files mask="erpc_transport_arbitrator.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_arbitrated_client_manager.cpp"/>
        <files mask="erpc_client_manager.cpp"/>
        <files mask="erpc_simple_server.cpp"/>
        <files mask="erpc_server.cpp"/>
        <files mask="erpc_transport_arbitrator.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="c_include">
        <files mask="erpc_client_manager.h"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="c_include">
        <files mask="erpc_arbitrated_client_setup.h"/>
        <files mask="erpc_server_setup.h"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_arbitrated_client_setup.cpp"/>
        <files mask="erpc_server_setup.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/port" type="c_include">
        <files mask="erpc_threading.h"/>
      </source>
      <source relative_path="erpc/erpc_c/port" type="src">
        <files mask="erpc_threading_freertos.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_arbitrator.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/port" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.port_stdlib.MIMX8ML8" name="eRPC_port_stdlib" brief="eRPC_port_stdlib" version="1.14.0" full_name="eRPC stdlib port layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/port" type="c_include">
        <files mask="erpc_port.h"/>
      </source>
      <source relative_path="erpc/erpc_c/port" type="src">
        <files mask="erpc_port_stdlib.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_port_stdlib.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/port" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.port_freertos.MIMX8ML8" name="eRPC_port_freertos" brief="eRPC_port_freertos" version="1.14.0" full_name="eRPC FreeRTOS port layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/port" type="c_include">
        <files mask="erpc_port.h"/>
        <files mask="erpc_threading.h"/>
        <files mask="erpc_setup_extensions.h"/>
      </source>
      <source relative_path="erpc/erpc_c/port" type="src">
        <files mask="erpc_port_freertos.cpp"/>
        <files mask="erpc_threading_freertos.cpp"/>
        <files mask="erpc_setup_extensions_freertos.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_port_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/port" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_mu_transport.MIMX8ML8" name="eRPC_mu_transport" brief="eRPC_mu_transport" version="1.14.0" full_name="eRPC MU transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_mu_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_mu_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_mu.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_mu_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_rpmsg_lite_transport_master.MIMX8ML8" name="eRPC_rpmsg_lite_transport_master" brief="eRPC_rpmsg_lite_transport_master" version="1.14.0" full_name="eRPC RPMsg-Lite transport layer master" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_rpmsg_lite_base.hpp"/>
        <files mask="erpc_rpmsg_lite_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_rpmsg_lite_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_static_queue.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_rpmsg.cpp"/>
        <files mask="erpc_setup_rpmsg_lite_master.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_rpmsg_lite_transport_master.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_rpmsg_lite_transport_remote.MIMX8ML8" name="eRPC_rpmsg_lite_transport_remote" brief="eRPC_rpmsg_lite_transport_remote" version="1.14.0" full_name="eRPC RPMsg-Lite transport layer remote" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_rpmsg_lite_base.hpp"/>
        <files mask="erpc_rpmsg_lite_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_rpmsg_lite_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_static_queue.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_rpmsg.cpp"/>
        <files mask="erpc_setup_rpmsg_lite_remote.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_rpmsg_lite_transport_remote.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_rpmsg_lite_rtos_transport_master.MIMX8ML8" name="eRPC_rpmsg_lite_rtos_transport_master" brief="eRPC_rpmsg_lite_rtos_transport_master" version="1.14.0" full_name="eRPC RPMsg-Lite RTOS transport layer master" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_rpmsg_lite_base.hpp"/>
        <files mask="erpc_rpmsg_lite_rtos_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_rpmsg_lite_rtos_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_rpmsg.cpp"/>
        <files mask="erpc_setup_rpmsg_lite_rtos_master.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_rpmsg_lite_rtos_transport_master.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_rpmsg_lite_rtos_transport_remote.MIMX8ML8" name="eRPC_rpmsg_lite_rtos_transport_remote" brief="eRPC_rpmsg_lite_rtos_transport_remote" version="1.14.0" full_name="eRPC RPMsg-Lite RTOS transport layer remote" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_rpmsg_lite_base.hpp"/>
        <files mask="erpc_rpmsg_lite_rtos_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_rpmsg_lite_rtos_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_rpmsg.cpp"/>
        <files mask="erpc_setup_rpmsg_lite_rtos_remote.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_rpmsg_lite_rtos_transport_remote.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_rpmsg_tty_rtos_transport.MIMX8ML8" name="eRPC_rpmsg_tty_rtos_transport" brief="eRPC_rpmsg_tty_rtos_transport" version="1.14.0" full_name="eRPC RPMsg-Lite TTY RTOS transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_rpmsg_lite_base.hpp"/>
        <files mask="erpc_rpmsg_tty_rtos_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_rpmsg_tty_rtos_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_rpmsg.cpp"/>
        <files mask="erpc_setup_rpmsg_tty_rtos_remote.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_rpmsg_tty_rtos_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_uart_cmsis_transport.MIMX8ML8" name="eRPC_uart_cmsis_transport" brief="eRPC_uart_cmsis_transport" version="1.14.0" full_name="eRPC UART CMSIS transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_uart_cmsis_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_uart_cmsis_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_uart_cmsis.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_uart_cmsis_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_dspi_master_transport.MIMX8ML8" name="eRPC_dspi_master_transport" brief="eRPC_dspi_master_transport" version="1.14.0" full_name="eRPC DSPI master transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_dspi_master_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_dspi_master_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_dspi_master.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_dspi_master_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_dspi_slave_transport.MIMX8ML8" name="eRPC_dspi_slave_transport" brief="eRPC_dspi_slave_transport" version="1.14.0" full_name="eRPC DSPI slave transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_dspi_slave_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_dspi_slave_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_dspi_slave.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_dspi_slave_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_spi_master_transport.MIMX8ML8" name="eRPC_spi_master_transport" brief="eRPC_spi_master_transport" version="1.14.0" full_name="eRPC SPI master transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_spi_master_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_spi_master_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_spi_master.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_spi_master_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_spi_slave_transport.MIMX8ML8" name="eRPC_spi_slave_transport" brief="eRPC_spi_slave_transport" version="1.14.0" full_name="eRPC SPI slave transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_spi_slave_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_spi_slave_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_spi_slave.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_spi_slave_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_lpspi_slave_transport.MIMX8ML8" name="eRPC_lpspi_slave_transport" brief="eRPC_lpspi_slave_transport" version="1.14.0" full_name="eRPC LPSPI slave transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_lpspi_slave_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_lpspi_slave_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_lpspi_slave.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_lpspi_slave_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_i2c_slave_transport.MIMX8ML8" name="eRPC_i2c_slave_transport" brief="eRPC_i2c_slave_transport" version="1.14.0" full_name="eRPC I2C slave transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_i2c_slave_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_i2c_slave_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_i2c_slave.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_i2c_slave_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.eRPC_lpi2c_slave_transport.MIMX8ML8" name="eRPC_lpi2c_slave_transport" brief="eRPC_lpi2c_slave_transport" version="1.14.0" full_name="eRPC LPI2C slave transport layer" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.multicore.erpc.port_freertos.MIMX8ML8"/>
            <component_dependency value="middleware.multicore.erpc.port_stdlib.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/erpc_c/transports" type="cpp_include">
        <files mask="erpc_lpi2c_slave_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/transports" type="src">
        <files mask="erpc_lpi2c_slave_transport.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/setup" type="src">
        <files mask="erpc_setup_mbf_dynamic.cpp"/>
        <files mask="erpc_setup_lpi2c_slave.cpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="cpp_include">
        <files mask="erpc_framed_transport.hpp"/>
      </source>
      <source relative_path="erpc/erpc_c/infra" type="src">
        <files mask="erpc_framed_transport.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_eRPC_lpi2c_slave_transport.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/erpc_c/transports" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="c_include"/>
        <include_path relative_path="erpc/erpc_c/transports" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/setup" type="asm_include"/>
        <include_path relative_path="erpc/erpc_c/infra" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.examples.erpc_common_multicore.MIMX8ML8" name="eRPC_common" brief="eRPC" version="1.14.0" full_name="Embedded Remote Procedure Call" category="Multicore/Remote Procedure Call" user_visible="true" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK" type="c_include">
        <files mask="erpc_error_handler.h"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK" type="src">
        <files mask="erpc_error_handler.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_examples_erpc_common_multicore.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK" type="c_include"/>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.examples.erpc_matrix_multiply_client.MIMX8ML8" name="eRPC_examples Matrix Multiply Client" brief="erpc_examples Matrix Multiply Client" version="1.14.0" full_name="eRPC examples" category="Multicore/Remote Procedure Call" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="c_include">
        <files mask="erpc_matrix_multiply_common.h"/>
        <files mask="c_erpc_matrix_multiply_client.h"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="cpp_include">
        <files mask="erpc_matrix_multiply_common.hpp"/>
        <files mask="erpc_matrix_multiply_client.hpp"/>
        <files mask="erpc_matrix_multiply_interface.hpp"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="src">
        <files mask="erpc_matrix_multiply_client.cpp"/>
        <files mask="erpc_matrix_multiply_interface.cpp"/>
        <files mask="c_erpc_matrix_multiply_client.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_examples_erpc_matrix_multiply_client.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="c_include"/>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.examples.erpc_matrix_multiply_server.MIMX8ML8" name="eRPC_examples Matrix Multiply Server" brief="erpc_examples Matrix Multiply Server" version="1.14.0" full_name="eRPC examples" category="Multicore/Remote Procedure Call" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="c_include">
        <files mask="erpc_matrix_multiply_common.h"/>
        <files mask="c_erpc_matrix_multiply_server.h"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="cpp_include">
        <files mask="erpc_matrix_multiply_common.hpp"/>
        <files mask="erpc_matrix_multiply_server.hpp"/>
        <files mask="erpc_matrix_multiply_interface.hpp"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="src">
        <files mask="erpc_matrix_multiply_server.cpp"/>
        <files mask="erpc_matrix_multiply_interface.cpp"/>
        <files mask="c_erpc_matrix_multiply_server.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_examples_erpc_matrix_multiply_server.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="c_include"/>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_matrix_multiply/service" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.examples.erpc_two_way_rpc_core0.MIMX8ML8" name="eRPC_examples Two Way RPC core0" brief="erpc_examples Two Way RPC core0" version="1.14.0" full_name="eRPC examples" category="Multicore/Remote Procedure Call" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="c_include">
        <files mask="erpc_two_way_rpc_Core0Interface_common.h"/>
        <files mask="c_erpc_two_way_rpc_Core0Interface_client.h"/>
        <files mask="erpc_two_way_rpc_Core1Interface_common.h"/>
        <files mask="c_erpc_two_way_rpc_Core1Interface_server.h"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="cpp_include">
        <files mask="erpc_two_way_rpc_Core0Interface_common.hpp"/>
        <files mask="erpc_two_way_rpc_Core0Interface_client.hpp"/>
        <files mask="erpc_two_way_rpc_Core0Interface_interface.hpp"/>
        <files mask="erpc_two_way_rpc_Core1Interface_common.hpp"/>
        <files mask="erpc_two_way_rpc_Core1Interface_server.hpp"/>
        <files mask="erpc_two_way_rpc_Core1Interface_interface.hpp"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="src">
        <files mask="erpc_two_way_rpc_Core0Interface_client.cpp"/>
        <files mask="c_erpc_two_way_rpc_Core0Interface_client.cpp"/>
        <files mask="erpc_two_way_rpc_Core0Interface_interface.cpp"/>
        <files mask="erpc_two_way_rpc_Core1Interface_server.cpp"/>
        <files mask="c_erpc_two_way_rpc_Core1Interface_server.cpp"/>
        <files mask="erpc_two_way_rpc_Core1Interface_interface.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_examples_erpc_two_way_rpc_core0.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="c_include"/>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.erpc.examples.erpc_two_way_rpc_core1.MIMX8ML8" name="eRPC_examples Two Way RPC core1" brief="erpc_examples Two Way RPC core1" version="1.14.0" full_name="eRPC examples" category="Multicore/Remote Procedure Call" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="erpc">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.multicore.erpc.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="c_include">
        <files mask="erpc_two_way_rpc_Core1Interface_common.h"/>
        <files mask="c_erpc_two_way_rpc_Core1Interface_client.h"/>
        <files mask="erpc_two_way_rpc_Core0Interface_common.h"/>
        <files mask="c_erpc_two_way_rpc_Core0Interface_server.h"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="cpp_include">
        <files mask="erpc_two_way_rpc_Core1Interface_common.hpp"/>
        <files mask="erpc_two_way_rpc_Core1Interface_client.hpp"/>
        <files mask="erpc_two_way_rpc_Core1Interface_interface.hpp"/>
        <files mask="erpc_two_way_rpc_Core0Interface_common.hpp"/>
        <files mask="erpc_two_way_rpc_Core0Interface_server.hpp"/>
        <files mask="erpc_two_way_rpc_Core0Interface_interface.hpp"/>
      </source>
      <source relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="src">
        <files mask="erpc_two_way_rpc_Core1Interface_client.cpp"/>
        <files mask="c_erpc_two_way_rpc_Core1Interface_client.cpp"/>
        <files mask="erpc_two_way_rpc_Core1Interface_interface.cpp"/>
        <files mask="erpc_two_way_rpc_Core0Interface_server.cpp"/>
        <files mask="c_erpc_two_way_rpc_Core0Interface_server.cpp"/>
        <files mask="erpc_two_way_rpc_Core0Interface_interface.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_multicore_erpc_examples_erpc_two_way_rpc_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="c_include"/>
        <include_path relative_path="erpc/examples/MCUXPRESSO_SDK/erpc_two_way_rpc/service" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.llhttp.MIMX8ML8" name="llhttp" brief="HTTP parser in LLVM IR" version="6.0.5" full_name="llhttp" category="AWS IoT/llhttp" user_visible="true" type="middleware" package_base_path="middleware/llhttp" project_base_path="llhttp">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="utility.debug_console.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="llhttp.h"/>
      </source>
      <source relative_path="src" type="src">
        <files mask="api.c"/>
        <files mask="http.c"/>
        <files mask="llhttp.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_llhttp.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.fmstr.MIMX8ML8" name="FreeMASTER driver common files" brief="Common FreeMASTER driver code." version="3.0.7" full_name="FreeMASTER communication driver common code" category="FreeMASTER/FreeMASTER Driver" user_visible="true" type="middleware" package_base_path="middleware/freemaster" project_base_path="freemaster">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="middleware.fmstr.platform_56f800e.MIMX8ML8"/>
            <component_dependency value="middleware.fmstr.platform_gen32le.MIMX8ML8"/>
            <component_dependency value="middleware.fmstr.platform_pa32.MIMX8ML8"/>
            <component_dependency value="middleware.fmstr.platform_s12z.MIMX8ML8"/>
            <component_dependency value="middleware.fmstr.platform_s32.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="src/common" type="c_include">
        <files mask="freemaster.h"/>
        <files mask="freemaster_defcfg.h"/>
        <files mask="freemaster_private.h"/>
        <files mask="freemaster_protocol.h"/>
        <files mask="freemaster_rec.h"/>
        <files mask="freemaster_tsa.h"/>
        <files mask="freemaster_ures.h"/>
        <files mask="freemaster_utils.h"/>
        <files mask="freemaster_can.h"/>
        <files mask="freemaster_serial.h"/>
        <files mask="freemaster_net.h"/>
      </source>
      <source relative_path="src/common" type="src">
        <files mask="freemaster_appcmd.c"/>
        <files mask="freemaster_pipes.c"/>
        <files mask="freemaster_protocol.c"/>
        <files mask="freemaster_rec.c"/>
        <files mask="freemaster_scope.c"/>
        <files mask="freemaster_tsa.c"/>
        <files mask="freemaster_ures.c"/>
        <files mask="freemaster_utils.c"/>
        <files mask="freemaster_can.c"/>
        <files mask="freemaster_sha.c"/>
        <files mask="freemaster_pdbdm.c"/>
        <files mask="freemaster_serial.c"/>
        <files mask="freemaster_net.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_fmstr.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="src/common" type="c_include"/>
        <include_path relative_path="src/common" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.fmstr.platform_gen32le.MIMX8ML8" name="FreeMASTER 32bit driver" brief="FreeMASTER driver code for 32bit platforms, enabling communication between FreeMASTER or FreeMASTER Lite tools and MCU application. Supports Serial, CAN, USB and BDM/JTAG physical interface." version="3.0.7" full_name="FreeMASTER communication driver for 32bit platforms" category="FreeMASTER/FreeMASTER Driver" user_visible="true" type="middleware" package_base_path="middleware/freemaster" project_base_path="freemaster">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.fmstr.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="src/platforms/gen32le" type="c_include">
        <files mask="freemaster_gen32le.h"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/can" type="src">
        <files mask="freemaster_flexcan.c"/>
        <files mask="freemaster_flexcanfd.c"/>
        <files mask="freemaster_mscan.c"/>
        <files mask="freemaster_mcan.c"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/can" type="c_include">
        <files mask="freemaster_flexcanfd.h"/>
        <files mask="freemaster_flexcan.h"/>
        <files mask="freemaster_mscan.h"/>
        <files mask="freemaster_mcan.h"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/serial" type="src">
        <files mask="freemaster_serial_uart.c"/>
        <files mask="freemaster_serial_lpsci.c"/>
        <files mask="freemaster_serial_lpuart.c"/>
        <files mask="freemaster_serial_usart.c"/>
        <files mask="freemaster_serial_miniusart.c"/>
        <files mask="freemaster_serial_usb.c"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/serial" type="c_include">
        <files mask="freemaster_serial_uart.h"/>
        <files mask="freemaster_serial_lpsci.h"/>
        <files mask="freemaster_serial_lpuart.h"/>
        <files mask="freemaster_serial_usart.h"/>
        <files mask="freemaster_serial_miniusart.h"/>
        <files mask="freemaster_serial_usb.h"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/network" type="src">
        <files mask="freemaster_net_segger_rtt.c"/>
        <files mask="freemaster_net_lwip_udp.c"/>
        <files mask="freemaster_net_lwip_tcp.c"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/network" type="c_include">
        <files mask="freemaster_net_segger_rtt.h"/>
        <files mask="freemaster_net_lwip_udp.h"/>
        <files mask="freemaster_net_lwip_tcp.h"/>
      </source>
      <source relative_path="src/template/gen32le" config="true" type="c_include">
        <files mask="freemaster_cfg.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_fmstr_platform_gen32le.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="src/platforms/gen32le" type="c_include"/>
        <include_path relative_path="src/drivers/mcuxsdk/can" type="c_include"/>
        <include_path relative_path="src/drivers/mcuxsdk/serial" type="c_include"/>
        <include_path relative_path="src/template/gen32le" type="c_include"/>
        <include_path relative_path="src/platforms/gen32le" type="asm_include"/>
        <include_path relative_path="src/drivers/mcuxsdk/can" type="asm_include"/>
        <include_path relative_path="src/drivers/mcuxsdk/serial" type="asm_include"/>
        <include_path relative_path="src/template/gen32le" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.fmstr.platform_56f800e.MIMX8ML8" name="FreeMASTER DSC driver" brief="FreeMASTER driver code for DSC platforms, enabling communication between FreeMASTER or FreeMASTER Lite tools and MCU application. Supports Serial, CAN, USB and BDM/JTAG physical interface." version="3.0.7" full_name="FreeMASTER communication driver for DSC platforms" category="FreeMASTER/FreeMASTER Driver" user_visible="true" type="middleware" package_base_path="middleware/freemaster" project_base_path="freemaster">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.fmstr.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="src/platforms/56f800e" type="c_include">
        <files mask="freemaster_56f800e.h"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/can" type="src">
        <files mask="freemaster_flexcan_dsc.c"/>
        <files mask="freemaster_mscan_dsc.c"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/can" type="c_include">
        <files mask="freemaster_flexcan_dsc.h"/>
        <files mask="freemaster_mscan_dsc.h"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/serial" type="src">
        <files mask="freemaster_serial_qsci.c"/>
        <files mask="freemaster_56f800e_eonce.c"/>
        <files mask="freemaster_serial_usb.c"/>
      </source>
      <source relative_path="src/drivers/mcuxsdk/serial" type="c_include">
        <files mask="freemaster_serial_qsci.h"/>
        <files mask="freemaster_56f800e_eonce.h"/>
        <files mask="freemaster_serial_usb.h"/>
      </source>
      <source relative_path="src/template/56f800e" project_relative_path="../source" config="true" type="c_include">
        <files mask="freemaster_cfg.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_fmstr_platform_56f800e.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="src/platforms/56f800e" type="c_include"/>
        <include_path relative_path="src/drivers/mcuxsdk/can" type="c_include"/>
        <include_path relative_path="src/drivers/mcuxsdk/serial" type="c_include"/>
        <include_path relative_path="src/template/56f800e" project_relative_path="../source" type="c_include"/>
        <include_path relative_path="src/platforms/56f800e" type="asm_include"/>
        <include_path relative_path="src/drivers/mcuxsdk/can" type="asm_include"/>
        <include_path relative_path="src/drivers/mcuxsdk/serial" type="asm_include"/>
        <include_path relative_path="src/template/56f800e" project_relative_path="../source" type="asm_include"/>
      </include_paths>
    </component>
    <!--<component id="middleware.fmstr.all_files.MIMX8ML8" name="FreeMASTER driver all files" version="3.0.7" package_base_path="middleware/freemaster" project_base_path="freemaster">
  <source relative_path="src/common" type="c_include">
    <files mask="freemaster.h"/>
    <files mask="freemaster_can.h"/>
    <files mask="freemaster_defcfg.h"/>
    <files mask="freemaster_net.h"/>
    <files mask="freemaster_private.h"/>
    <files mask="freemaster_protocol.h"/>
    <files mask="freemaster_rec.h"/>
    <files mask="freemaster_serial.h"/>
    <files mask="freemaster_tsa.h"/>
    <files mask="freemaster_ures.h"/>
    <files mask="freemaster_utils.h"/>
  </source>
  <source relative_path="src/common" type="src">
    <files mask="freemaster_appcmd.c"/>
    <files mask="freemaster_can.c"/>
    <files mask="freemaster_net.c"/>
    <files mask="freemaster_pdbdm.c"/>
    <files mask="freemaster_pipes.c"/>
    <files mask="freemaster_protocol.c"/>
    <files mask="freemaster_rec.c"/>
    <files mask="freemaster_scope.c"/>
    <files mask="freemaster_serial.c"/>
    <files mask="freemaster_sha.c"/>
    <files mask="freemaster_tsa.c"/>
    <files mask="freemaster_ures.c"/>
    <files mask="freemaster_utils.c"/>
  </source>
  <source relative_path="src/common" type="other">
    <files mask="freemaster_cfg.h.example"/>
  </source>
  <source relative_path="src/platforms/56f800e" type="c_include">
    <files mask="freemaster_56f800e.h"/>
  </source>
  <source relative_path="src/platforms/gen32be" type="c_include">
    <files mask="freemaster_gen32be.h"/>
  </source>
  <source relative_path="src/platforms/gen32le" type="c_include">
    <files mask="freemaster_gen32le.h"/>
  </source>
  <source relative_path="src/platforms/s12z" type="c_include">
    <files mask="freemaster_s12z.h"/>
  </source>
  <source relative_path="src/drivers" type="doc">
    <files mask="readme.txt"/>
  </source>
  <source relative_path="src/drivers/dreg/DSC" type="src">
    <files mask="freemaster_56f800e_eonce.c"/>
    <files mask="freemaster_56f800e_flexcan.c"/>
    <files mask="freemaster_56f800e_qsci.c"/>
  </source>
  <source relative_path="src/drivers/dreg/DSC" type="c_include">
    <files mask="freemaster_56f800e_eonce.h"/>
    <files mask="freemaster_56f800e_flexcan.h"/>
    <files mask="freemaster_56f800e_qsci.h"/>
  </source>
  <source relative_path="src/drivers/dreg/Kxx" type="src">
    <files mask="freemaster_kxx_uart.c"/>
  </source>
  <source relative_path="src/drivers/dreg/Kxx" type="c_include">
    <files mask="freemaster_kxx_uart.h"/>
  </source>
  <source relative_path="src/drivers/dreg/MPC" type="src">
    <files mask="freemaster_mpc574xp_linflex.c"/>
  </source>
  <source relative_path="src/drivers/dreg/MPC" type="c_include">
    <files mask="freemaster_mpc574xp_linflex.h"/>
  </source>
  <source relative_path="src/drivers/dreg/S12Z" type="src">
    <files mask="freemaster_s12z_mscan.c"/>
    <files mask="freemaster_s12z_sci.c"/>
  </source>
  <source relative_path="src/drivers/dreg/S12Z" type="c_include">
    <files mask="freemaster_s12z_mscan.h"/>
    <files mask="freemaster_s12z_sci.h"/>
  </source>
  <source relative_path="src/drivers/mcuxsdk/can" type="src">
    <files mask="freemaster_flexcan.c"/>
    <files mask="freemaster_flexcan_dsc.c"/>
    <files mask="freemaster_flexcanfd.c"/>
    <files mask="freemaster_mcan.c"/>
    <files mask="freemaster_mscan.c"/>
    <files mask="freemaster_mscan_dsc.c"/>
  </source>
  <source relative_path="src/drivers/mcuxsdk/can" type="c_include">
    <files mask="freemaster_flexcan.h"/>
    <files mask="freemaster_flexcan_dsc.h"/>
    <files mask="freemaster_flexcanfd.h"/>
    <files mask="freemaster_mcan.h"/>
    <files mask="freemaster_mscan.h"/>
    <files mask="freemaster_mscan_dsc.h"/>
  </source>
  <source relative_path="src/drivers/mcuxsdk/serial" type="src">
    <files mask="freemaster_56f800e_eonce.c"/>
    <files mask="freemaster_serial_lpsci.c"/>
    <files mask="freemaster_serial_lpuart.c"/>
    <files mask="freemaster_serial_miniusart.c"/>
    <files mask="freemaster_serial_qsci.c"/>
    <files mask="freemaster_serial_uart.c"/>
    <files mask="freemaster_serial_usart.c"/>
    <files mask="freemaster_serial_usb.c"/>
  </source>
  <source relative_path="src/drivers/mcuxsdk/serial" type="c_include">
    <files mask="freemaster_56f800e_eonce.h"/>
    <files mask="freemaster_serial_lpsci.h"/>
    <files mask="freemaster_serial_lpuart.h"/>
    <files mask="freemaster_serial_miniusart.h"/>
    <files mask="freemaster_serial_qsci.h"/>
    <files mask="freemaster_serial_uart.h"/>
    <files mask="freemaster_serial_usart.h"/>
    <files mask="freemaster_serial_usb.h"/>
  </source>
  <source relative_path="src/drivers/ampxsdk/uart/S32K1x" type="src">
    <files mask="freemaster_serial_lpuart.c"/>
  </source>
  <source relative_path="src/drivers/ampxsdk/uart/S32K1x" type="c_include">
    <files mask="freemaster_serial_lpuart.h"/>
  </source>
  <source relative_path="src/drivers/ampxsdk/can/S32K1x" type="src">
    <files mask="freemaster_flexcan.c"/>
  </source>
  <source relative_path="src/drivers/ampxsdk/can/S32K1x" type="c_include">
    <files mask="freemaster_flexcan.h"/>
  </source>
  <source relative_path="src/support/mcuxsdk_usb" type="src">
    <files mask="freemaster_usb.c"/>
    <files mask="freemaster_usb_device_descriptor.c"/>
  </source>
  <source relative_path="src/support/mcuxsdk_usb" type="c_include">
    <files mask="freemaster_usb.h"/>
    <files mask="freemaster_usb_device_descriptor.h"/>
    <files mask="usb_device_descriptor.h"/>
  </source>
  <source relative_path="src/support/mcuxsdk_usb" type="doc">
    <files mask="readme.txt"/>
  </source>
  <source relative_path="./" type="doc">
    <files mask="ChangeLogKSDK.txt"/>
  </source>
</component>-->
    <component id="middleware.fmstr.platform_s32.MIMX8ML8" name="FreeMASTER S32 driver" brief="FreeMASTER driver code for S32 platform." version="3.0.7" full_name="FreeMASTER communication driver for S32 platform" category="FreeMASTER/FreeMASTER Driver" user_visible="false" type="middleware" package_base_path="middleware/freemaster" project_base_path="freemaster">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.fmstr.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="src/platforms/gen32le" type="c_include">
        <files mask="freemaster_gen32le.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_fmstr_platform_s32.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="src/platforms/gen32le" type="c_include"/>
        <include_path relative_path="src/platforms/gen32le" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.fmstr.platform_pa32.MIMX8ML8" name="FreeMASTER Power Architecture driver" brief="FreeMASTER driver code for Power Architecture 32bit platform." version="3.0.7" full_name="FreeMASTER communication driver for Power Architecture 32bit platform" category="FreeMASTER/FreeMASTER Driver" user_visible="false" type="middleware" package_base_path="middleware/freemaster" project_base_path="freemaster">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.fmstr.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="src/platforms/gen32be" type="c_include">
        <files mask="freemaster_gen32be.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_fmstr_platform_pa32.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="src/platforms/gen32be" type="c_include"/>
        <include_path relative_path="src/platforms/gen32be" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.fmstr.platform_s12z.MIMX8ML8" name="FreeMASTER S12Z driver" brief="FreeMASTER driver code for S12Z platform." version="3.0.7" full_name="FreeMASTER communication driver for S12Z platform" category="FreeMASTER/FreeMASTER Driver" user_visible="false" type="middleware" package_base_path="middleware/freemaster" project_base_path="freemaster">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="middleware.fmstr.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="src/platforms/s12z" type="c_include">
        <files mask="freemaster_s12z.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_fmstr_platform_s12z.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="src/platforms/s12z" type="c_include"/>
        <include_path relative_path="src/platforms/s12z" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.iuart_adapter.MIMX8ML8" name="iuart_adapter" brief="Component iuart_adapter" version="1.0.0" full_name="iuart_adapter" category="Device/SDK Drivers" user_visible="true" type="utilities" package_base_path="components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.iuart.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_iuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_iuart_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.rpmsg_endpoint.MIMX8ML8" name="srtm rpmsg endpoint" brief="Driver srtm rpmsg endpoint" version="1.0.0" full_name="Driver srtm rpmsg endpoint" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/channels" project_base_path="srtm/channels">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_rpmsg_endpoint.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_rpmsg_endpoint.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_rpmsg_endpoint.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_audio_service.MIMX8ML8" name="srtm audio service" brief="Driver srtm audio service" version="1.0.0" full_name="Driver srtm audio services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_audio_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_audio_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_audio_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_i2c_codec_adapter.MIMX8ML8" name="srtm i2c codec adapter" brief="Driver srtm i2c codec adapter" version="1.0.0" full_name="Driver srtm i2c codec adapter" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.srtm_audio_service.MIMX8ML8"/>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_i2c_codec_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_i2c_codec_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_i2c_codec_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_pdm_sdma_adapter.MIMX8ML8" name="srtm pdm sdma adapter" brief="Driver srtm pdm sdma adapter" version="1.0.0" full_name="Driver srtm pdm sdma adapter" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.srtm_audio_service.MIMX8ML8"/>
          <component_dependency value="platform.drivers.pdm_sdma.MIMX8ML8"/>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_pdm_sdma_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_pdm_sdma_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_pdm_sdma_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_sai_sdma_adapter.MIMX8ML8" name="srtm sai sdma adapter" brief="Driver srtm sai sdma adapter" version="1.0.0" full_name="Driver srtm sai sdma adapter" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.srtm_audio_service.MIMX8ML8"/>
          <component_dependency value="platform.drivers.sai_sdma.MIMX8ML8"/>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_sai_sdma_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_sai_sdma_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_sai_sdma_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_wm8524_adapter.MIMX8ML8" name="srtm wm8524 adapter" brief="Driver srtm wm8524 adapter" version="1.0.0" full_name="Driver srtm wm8524 adapter" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.srtm_audio_service.MIMX8ML8"/>
          <component_dependency value="component.wm8524_adapter.MIMX8ML8"/>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_wm8524_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_wm8524_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_wm8524_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_i2c_service.MIMX8ML8" name="srtm i2c service" brief="Driver srtm i2c service" version="1.0.0" full_name="Driver srtm auto services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_i2c_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_i2c_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_i2c_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_auto_service.MIMX8ML8" name="srtm auto service" brief="Driver srtm auto service" version="1.0.0" full_name="Driver srtm auto services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_auto_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_auto_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_auto_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_io_service.MIMX8ML8" name="srtm io service" brief="Driver srtm io service" version="1.0.0" full_name="Driver srtm io services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_io_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_io_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_io_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_keypad_service.MIMX8ML8" name="srtm keypad service" brief="Driver srtm keypad service" version="1.0.0" full_name="Driver srtm keypad services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_keypad_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_keypad_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_keypad_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_lfcl_service.MIMX8ML8" name="srtm lfcl service" brief="Driver srtm lfcl service" version="1.0.0" full_name="Driver srtm lfcl services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_lfcl_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_lfcl_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_lfcl_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_netc_service.MIMX8ML8" name="srtm netc service" brief="Driver srtm netc service" version="1.0.0" full_name="Driver srtm netc services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_netc_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_netc_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_netc_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_pmic_service.MIMX8ML8" name="srtm pmic service" brief="Driver srtm pmic service" version="1.0.0" full_name="Driver srtm pmic services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_pmic_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_pmic_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_pmic_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_sensor_service.MIMX8ML8" name="srtm sensor service" brief="Driver srtm sensor service" version="1.0.0" full_name="Driver srtm sensor services" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_sensor_service.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_sensor_service.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_sensor_service.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.srtm_snvs_lp_rtc_adapter.MIMX8ML8" name="srtm snvs lp rtc adapter" brief="Driver srtm snvs lp rtc adapter" version="1.0.0" full_name="Driver snvs lp rtc adapter" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/services" project_base_path="srtm/services">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="srtm_snvs_lp_rtc_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="srtm_snvs_lp_rtc_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_srtm_snvs_lp_rtc_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.srtm.MIMX8ML8" name="srtm" brief="Driver srtm" version="1.1.0" full_name="Driver srtm" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm" project_base_path="srtm">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.rpmsg_endpoint.MIMX8ML8"/>
          <component_dependency value="driver.srtm.freertos.MIMX8ML8"/>
          <component_dependency value="middleware.multicore.rpmsg-lite.MIMX8ML8"/>
          <component_dependency value="middleware.multicore.rpmsg-lite.ns.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="srtm_channel.h"/>
        <files mask="srtm_defs.h"/>
        <files mask="srtm_dispatcher.h"/>
        <files mask="srtm_message.h"/>
        <files mask="srtm_peercore.h"/>
        <files mask="srtm_service.h"/>
      </source>
      <source relative_path="srtm" type="src">
        <files mask="srtm_channel.c"/>
        <files mask="srtm_dispatcher.c"/>
        <files mask="srtm_message.c"/>
        <files mask="srtm_peercore.c"/>
        <files mask="srtm_service.c"/>
      </source>
      <source relative_path="srtm" type="c_include">
        <files mask="srtm_channel_struct.h"/>
        <files mask="srtm_dispatcher_struct.h"/>
        <files mask="srtm_message_struct.h"/>
        <files mask="srtm_peercore_struct.h"/>
        <files mask="srtm_service_struct.h"/>
        <files mask="srtm_heap.h"/>
        <files mask="srtm_message_pool.h"/>
        <files mask="srtm_list.h"/>
        <files mask="srtm_mutex.h"/>
        <files mask="srtm_sem.h"/>
      </source>
      <source relative_path="port" type="src">
        <files mask="srtm_message_pool.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_srtm.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="srtm" type="c_include"/>
        <include_path relative_path="port" type="c_include"/>
        <include_path relative_path="include" type="asm_include"/>
        <include_path relative_path="srtm" type="asm_include"/>
        <include_path relative_path="port" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.srtm.freertos.MIMX8ML8" name="freertos" brief="Driver srtm freertos" version="1.0.0" full_name="Driver srtm freertos" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/srtm/port" project_base_path="srtm/port">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="driver.srtm.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="srtm_heap_freertos.c"/>
        <files mask="srtm_mutex_freertos.c"/>
        <files mask="srtm_sem_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_srtm_freertos.MIMX8ML8.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.silicon_id.MIMX8ML8" name="silicon_id" brief="Driver silicon_id" version="2.0.1" full_name="Driver silicon_id" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/silicon_id" project_base_path="component/silicon_id">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxLZ"/>
            <device_dependency value="MIMX8ML8xxxKZ"/>
          </any_of>
          <component_dependency value="component.silicon_id_imx8.MIMX8ML8"/>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_silicon_id.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_silicon_id.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_silicon_id.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MIMX8ML8" name="serial_manager" brief="Component serial_manager" version="1.0.1" full_name="Serial Manager" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.serial_manager_swo.MIMX8ML8"/>
            <component_dependency value="component.serial_manager_uart.MIMX8ML8"/>
            <component_dependency value="component.serial_manager_virtual.MIMX8ML8"/>
          </any_of>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.lists.MIMX8ML8"/>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.eth_phy_common.MIMX8ML8" name="phy-common" brief="Driver phy-common" version="2.0.0" full_name="Driver phy-common" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/phy" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phy.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_eth_phy_common.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phyaqr113c.MIMX8ML8" name="phy-device-aqr113c" brief="Driver phy-device-aqr113c" version="2.0.0" full_name="Driver phy-device-aqr113c" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phyaqr113c" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phyaqr113c.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyaqr113c.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phyaqr113c.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phyar8031.MIMX8ML8" name="phy-device-ar8031" brief="Driver phy-device-ar8031" version="2.0.0" full_name="Driver phy-device-ar8031" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phyar8031" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phyar8031.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyar8031.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phyar8031.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phydp8384x.MIMX8ML8" name="phy-device-dp8384x" brief="Driver phy-device-dp8384x" version="2.0.0" full_name="Driver phy-device-dp8384x" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phydp8384x" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phydp8384x.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phydp8384x.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phydp8384x.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phygpy215.MIMX8ML8" name="phy-device-gpy215" brief="Driver phy-device-gpy215" version="2.0.0" full_name="Driver phy-device-gpy215" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phygpy215" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phygpy215.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phygpy215.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phygpy215.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phyksz8041.MIMX8ML8" name="phy-device-ksz8041" brief="Driver phy-device-ksz8041" version="2.0.0" full_name="Driver phy-device-ksz8041" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phyksz8041" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phyksz8041.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyksz8041.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phyksz8041.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phyksz8081.MIMX8ML8" name="phy-device-ksz8081" brief="Driver phy-device-ksz8081" version="2.0.0" full_name="Driver phy-device-ksz8081" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phyksz8081" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phyksz8081.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyksz8081.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phyksz8081.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phylan8720a.MIMX8ML8" name="phy-device-lan8720a" brief="Driver phy-device-lan8720a" version="2.0.0" full_name="Driver phy-device-lan8720a" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phylan8720a" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phylan8720a.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phylan8720a.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phylan8720a.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phylan8741.MIMX8ML8" name="phy-device-lan8741" brief="Driver phy-device-lan8741" version="2.0.0" full_name="Driver phy-device-lan8741" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phylan8741" project_base_path="phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phylan8741.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phylan8741.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phylan8741.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phyrtl8201.MIMX8ML8" name="phy-device-rtl8201" brief="Driver phy-device-rtl8201" version="2.0.0" full_name="Driver phy-device-rtl8201" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phyrtl8201" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phyrtl8201.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyrtl8201.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phyrtl8201.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phyrtl8211f.MIMX8ML8" name="phy-device-rtl8211f" brief="Driver phy-device-rtl8211f" version="2.0.0" full_name="Driver phy-device-rtl8211f" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phyrtl8211f" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phyrtl8211f.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyrtl8211f.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phyrtl8211f.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phytja1100.MIMX8ML8" name="phy-device-tja1100" brief="Driver phy-device-tja1100" version="2.0.0" full_name="Driver phy-device-tja1100" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phytja1100" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phytja1100.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phytja1100.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phytja1100.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phytja1120.MIMX8ML8" name="phy-device-tja1120" brief="Driver phy-device-tja1120" version="2.0.0" full_name="Driver phy-device-tja1120" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phytja1120" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phytja1120.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phytja1120.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phytja1120.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phyvsc8541.MIMX8ML8" name="phy-device-vsc8541" brief="Driver phy-device-vsc8541" version="2.0.0" full_name="Driver phy-device-vsc8541" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phyvsc8541" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phyvsc8541.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyvsc8541.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phyvsc8541.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.phyyt8521.MIMX8ML8" name="phy-device-yt8521" brief="Driver phy-device-yt8521" version="2.0.0" full_name="Driver phy-device-yt8521" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="components/phy/device/phyyt8521" project_base_path="component/phy">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.eth_phy_common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_phyyt8521.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyyt8521.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_phyyt8521.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MIMX8ML8" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/lists" project_base_path="component/lists">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lists.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.ii2c_adapter.MIMX8ML8" name="ii2c_adapter" brief="Component ii2c_adapter" version="1.0.0" full_name="Component ii2c_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.i2c_adapter_interface.MIMX8ML8"/>
          <component_dependency value="platform.drivers.ii2c.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ii2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ii2c_adapter.MIMX8ML8.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.i2c_adapter_interface.MIMX8ML8" name="i2c_adapter_interface" brief="Component i2c_adapter_interface" version="1.0.0" full_name="Component i2c_adapter_interface" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.ii2c_adapter.MIMX8ML8"/>
          <component_dependency value="platform.drivers.ii2c.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i2c_adapter_interface.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.i2c_mux_pca954x.MIMX8ML8" name="i2c_mux_pca954x" brief="Component i2c_mux_pca954x" version="1.0.0" full_name="Component i2c_mux_pca954x" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/i2c/muxes" project_base_path="component/i2c/muxes">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.i2c_mux.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pca954x.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pca954x.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i2c_mux_pca954x.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.enable_pca9544.MIMX8ML8" name="enable_pca9544" brief="Component enable_pca9544" version="1.0.0" full_name="Component enable_pca9544" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/i2c/muxes" project_base_path="component/i2c/muxes">
      <defines>
        <define name="MCUX_ENABLE_PCA9544" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.i2c_mux_pca954x.MIMX8ML8"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_enable_pca9544.MIMX8ML8.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.enable_pca9548.MIMX8ML8" name="enable_pca9548" brief="Component enable_pca9548" version="1.0.0" full_name="Component enable_pca9548" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/i2c/muxes" project_base_path="component/i2c/muxes">
      <defines>
        <define name="MCUX_ENABLE_PCA9548" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.i2c_mux_pca954x.MIMX8ML8"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_enable_pca9548.MIMX8ML8.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.at_least_one_i2c_mux_device_enabled.MIMX8ML8" name="at_least_one_i2c_mux_device_enabled" brief="Component at_least_one_i2c_mux_device_enabled" version="1.0.0" full_name="Component at_least_one_i2c_mux_device_enabled" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="components/i2c/muxes" project_base_path="component/i2c/muxes">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.i2c_mux_pca954x.MIMX8ML8"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_at_least_one_i2c_mux_device_enabled.MIMX8ML8.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.codec_i2c.MIMX8ML8" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/i2c" project_base_path="codec">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.i2c_adapter_interface.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_codec_i2c.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.ak4497.MIMX8ML8" name="ak4497" brief="Driver ak4497" version="2.1.2" full_name="Driver ak4497" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/ak4497" project_base_path="codec">
      <defines>
        <define name="CODEC_AK4497_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.ak4497_adapter.MIMX8ML8"/>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ak4497.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ak4497.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ak4497.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.cs42448.MIMX8ML8" name="cs42448" brief="Driver cs42448" version="2.0.1" full_name="Driver cs42448" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/cs42448" project_base_path="codec">
      <defines>
        <define name="CODEC_CS42448_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.cs42448_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42448.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42448.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cs42448.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.cs42888.MIMX8ML8" name="cs42888" brief="Driver cs42888" version="2.1.3" full_name="Driver cs42888" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/cs42888" project_base_path="codec">
      <defines>
        <define name="CODEC_CS42888_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.cs42888_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42888.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42888.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cs42888.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.dialog7212.MIMX8ML8" name="dialog7212" brief="Driver dialog7212" version="2.3.1" full_name="Driver dialog7212" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/da7212" project_base_path="codec">
      <defines>
        <define name="CODEC_DA7212_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.da7212_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dialog7212.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dialog7212.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dialog7212.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.pcm186x.MIMX8ML8" name="pcm186x" brief="Driver pcm186x" version="2.0.1" full_name="Driver pcm186x" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/pcm186x" project_base_path="codec">
      <defines>
        <define name="CODEC_PCM186X_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.pcm186x_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pcm186x.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pcm186x.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pcm186x.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.pcm512x.MIMX8ML8" name="pcm512x" brief="Driver pcm512x" version="2.0.1" full_name="Driver pcm512x" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/pcm512x" project_base_path="codec">
      <defines>
        <define name="CODEC_PCM512X_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.pcm512x_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pcm512x.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pcm512x.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pcm512x.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.sgtl5000.MIMX8ML8" name="sgtl5000" brief="Driver sgtl5000" version="2.1.1" full_name="Driver sgtl5000" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/sgtl5000" project_base_path="codec">
      <defines>
        <define name="CODEC_SGTL5000_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.sgtl_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl5000.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl5000.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sgtl5000.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.tfa9896.MIMX8ML8" name="tfa9896" brief="Driver tfa9896" version="6.0.2" full_name="Driver tfa9896" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/tfa9896" project_base_path="codec">
      <defines>
        <define name="CODEC_TFA9896_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.tfa9896_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tfa9896_buffer.h"/>
        <files mask="fsl_tfa9896.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_hal_registers.c"/>
        <files mask="fsl_tfa9896.c"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="MIMXRT595595-EVK_TFA9896_SW.pdf"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_tfa9896.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.tfa9xxx.MIMX8ML8" name="tfa9xxx" brief="Driver tfa9xxx" version="2.1.0" full_name="Driver tfa9xxx" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/tfa9xxx" project_base_path="codec/tfa9xxx">
      <defines>
        <define name="CODEC_TFA9XXX_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.tfa9xxx_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="tfa_config_TFA9892N1.h"/>
        <files mask="tfa_config_TFA9894N1.h"/>
        <files mask="tfa_config_TFA9894N2.h"/>
        <files mask="fsl_tfa9xxx.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_tfa9xxx.c"/>
        <files mask="fsl_tfa9xxx_IMX.c"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="README.md"/>
      </source>
      <source relative_path="vas_tfa_drv" type="c_include">
        <files mask="config.h"/>
        <files mask="tfa2_container.h"/>
        <files mask="tfa2_dev.h"/>
        <files mask="tfa2_dsp_fw.h"/>
        <files mask="tfa2_haptic.h"/>
        <files mask="tfa9xxx_parameters.h"/>
        <files mask="tfa_haptic_fw_defs.h"/>
      </source>
      <source relative_path="vas_tfa_drv" type="src">
        <files mask="tfa2_container.c"/>
        <files mask="tfa2_dev.c"/>
        <files mask="tfa2_haptic.c"/>
        <files mask="tfa2_init.c"/>
        <files mask="tfa_container_crc32.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_tfa9xxx.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="vas_tfa_drv" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
        <include_path relative_path="vas_tfa_drv" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.tfa9xxx_hal.MIMX8ML8" name="tfa9xxx_hal" brief="Driver tfa9xxx_hal" version="2.1.0" full_name="Driver tfa9xxx_hal" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="components/codec/tfa9xxx" project_base_path="codec/tfa9xxx">
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
          <component_dependency value="driver.tfa9xxx.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="tfa_device_hal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="tfa_device_hal.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_tfa9xxx_hal.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8524.MIMX8ML8" name="wm8524" brief="Driver wm8524" version="2.1.1" full_name="Driver wm8524" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/wm8524" project_base_path="codec">
      <defines>
        <define name="CODEC_WM8524_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.wm8524_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8524.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8524.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wm8524.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8904.MIMX8ML8" name="wm8904" brief="Driver wm8904" version="2.5.1" full_name="Driver wm8904" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/wm8904" project_base_path="codec">
      <defines>
        <define name="CODEC_WM8904_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.wm8904_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8904.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8904.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wm8904.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8960.MIMX8ML8" name="wm8960" brief="Driver wm8960" version="2.2.4" full_name="Driver wm8960" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/wm8960" project_base_path="codec">
      <defines>
        <define name="CODEC_WM8960_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.wm8960_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wm8960.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8962.MIMX8ML8" name="wm8962" brief="Driver wm8962" version="2.2.0" full_name="Driver wm8962" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="components/codec/wm8962" project_base_path="codec">
      <defines>
        <define name="CODEC_WM8962_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_dependency value="MIMX8ML8xxxKZ"/>
            <device_dependency value="MIMX8ML8xxxLZ"/>
          </any_of>
          <component_dependency value="component.codec_adapters.MIMX8ML8"/>
          <component_dependency value="component.codec_i2c.MIMX8ML8"/>
          <component_dependency value="component.wm8962_adapter.MIMX8ML8"/>
          <component_dependency value="driver.codec.MIMX8ML8"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8962.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8962.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wm8962.MIMX8ML8.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="asm_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
